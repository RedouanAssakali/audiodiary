{"ast":null,"code":"import { pixelsToSeconds } from \"../../utils/conversions\";\nexport default class {\n  constructor(track) {\n    this.track = track;\n    this.active = false;\n  }\n\n  setup(samplesPerPixel, sampleRate) {\n    this.samplesPerPixel = samplesPerPixel;\n    this.sampleRate = sampleRate;\n  }\n\n  emitSelection(x) {\n    const minX = Math.min(x, this.startX);\n    const maxX = Math.max(x, this.startX);\n    const startTime = pixelsToSeconds(minX, this.samplesPerPixel, this.sampleRate);\n    const endTime = pixelsToSeconds(maxX, this.samplesPerPixel, this.sampleRate);\n    this.track.ee.emit(\"select\", startTime, endTime, this.track);\n  }\n\n  complete(x) {\n    this.emitSelection(x);\n    this.active = false;\n  }\n\n  mousedown(e) {\n    e.preventDefault();\n    this.active = true;\n    this.startX = e.offsetX;\n    const startTime = pixelsToSeconds(this.startX, this.samplesPerPixel, this.sampleRate);\n    this.track.ee.emit(\"select\", startTime, startTime, this.track);\n  }\n\n  mousemove(e) {\n    if (this.active) {\n      e.preventDefault();\n      this.emitSelection(e.offsetX);\n    }\n  }\n\n  mouseup(e) {\n    if (this.active) {\n      e.preventDefault();\n      this.complete(e.offsetX);\n    }\n  }\n\n  mouseleave(e) {\n    if (this.active) {\n      e.preventDefault();\n      this.complete(e.offsetX);\n    }\n  }\n\n  static getClass() {\n    return \".state-select\";\n  }\n\n  static getEvents() {\n    return [\"mousedown\", \"mousemove\", \"mouseup\", \"mouseleave\"];\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}