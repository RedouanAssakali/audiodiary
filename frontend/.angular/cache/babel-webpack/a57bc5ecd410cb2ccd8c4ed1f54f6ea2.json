{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nimport { Cloudinary } from \"@cloudinary/url-gen\";\nimport * as RecordRTC from \"recordrtc\";\nimport { fill, scale } from \"@cloudinary/url-gen/actions/resize\";\nlet RecDoneComponent = class RecDoneComponent {\n  constructor(modalService, router, domSanitizer) {\n    this.modalService = modalService;\n    this.router = router;\n    this.domSanitizer = domSanitizer;\n    this.closeResult = '';\n    this.cardColor = '#FE5F38';\n    this.clicked = false; //Will use this flag for detect recording\n\n    this.recording = false;\n    this.showRecordBtn = true;\n    this.value = './assets/img/rec-button.png'; //default_value\n  }\n\n  sanitize(url) {\n    return this.domSanitizer.bypassSecurityTrustUrl(url);\n  }\n\n  initiateRecording() {\n    this.recording = true;\n    let mediaConstraints = {\n      video: false,\n      audio: true\n    };\n    navigator.mediaDevices.getUserMedia(mediaConstraints).then(this.successCallback.bind(this), this.errorCallback.bind(this));\n  }\n  /**\r\n   * Will be called automatically.\r\n   */\n\n\n  successCallback(stream) {\n    var options = {\n      mimeType: \"audio/wav\",\n      numberOfAudioChannels: 1\n    }; //Start Actual Recording\n\n    var StereoAudioRecorder = RecordRTC.StereoAudioRecorder;\n    this.record = new StereoAudioRecorder(stream, options);\n    this.record.record();\n  }\n\n  stopRecording() {\n    this.recording = false;\n    this.record.stop(this.processRecording.bind(this));\n  }\n  /**\r\n   * processRecording Do what ever you want with blob\r\n   * @param  {any} blob Blog\r\n   */\n\n\n  processRecording(blob) {\n    this.url = URL.createObjectURL(blob);\n    console.log(blob);\n    const file = new File([blob], 'audio.mp3', {\n      type: blob.type\n    });\n    let container = new DataTransfer();\n    container.items.add(file);\n    document.getElementById('fileInput').files = container.files;\n  }\n  /**\r\n   * Process Error.\r\n   */\n\n\n  errorCallback(error) {\n    this.error = 'Can not play audio in your browser';\n  }\n\n  eventListen() {\n    const url = \"https://api.cloudinary.com/v1_1/hogeschool-van-amsterdam/upload\";\n    const form = document.querySelector(\"form\"); // @ts-ignore\n\n    const files = document.querySelector(\"[type=file]\").files;\n    const formData = new FormData();\n\n    for (let i = 0; i < files.length; i++) {\n      let file = files[i];\n      formData.append(\"file\", file);\n      formData.append(\"upload_preset\", \"ml_default\"); // formData.append(\"public_id\", \"6\");\n\n      fetch(url, {\n        method: \"POST\",\n        body: formData\n      }).then(response => {\n        return response.text();\n      }).then(data => {\n        document.getElementById(\"data\").innerHTML += \"Your audio is uploaded succesfully!\";\n      });\n    }\n  }\n\n  ngOnInit() {\n    // Create a Cloudinary instance and set your cloud name.\n    const cld = new Cloudinary({\n      cloud: {\n        cloudName: 'hogeschool-van-amsterdam'\n      }\n    }); // 3. Get your image\n    //===================\n    // Instantiate a CloudinaryImage object for the image with the public ID, 'docs/models'.\n\n    this.img = cld.image('1');\n    this.vid = cld.video(\"bensound-creativeminds_chahmj\");\n    this.vid.resize(scale().width(400));\n    this.vid.toURL(); // 4. Transform your image\n    //=========================\n    // Resize to 250 x 250 pixels using the 'fill' crop mode.\n\n    this.img.resize(fill().width(250).height(250)); // newly added\n\n    const uploaderOptions = {}; //\n    //\n    // var playlist = WaveformPlaylist({\n    //   samplesPerPixel: 3000,\n    //   waveHeight: 70,\n    //   container: document.getElementById(\"playlist\"),\n    //   state: \"cursor\",\n    //   isAutomaticScroll: true,\n    //\n    //   colors: {\n    //     waveOutlineColor: \"#E0EFF1\",\n    //     timeColor: \"orange\",\n    //     fadeColor: \"orange\"\n    //   },\n    //\n    //   controls: {\n    //     show: false,\n    //     width: 150,\n    //   },\n    //   zoomLevels: [500, 1000, 3000, 5000]\n    // });\n    //\n    //\n    // playlist.load([\n    //   {\n    //     src: \"../../assets/audio/creative_minds.mp3\"\n    //   }\n    //\n    //\n    // ]).then(function () {\n    //   var ee = playlist.getEventEmitter();\n    //   document.getElementById(\"playAudio\").addEventListener(\"click\", function () {\n    //     ee.emit(\"play\");\n    //     console.log(\"play\")\n    //\n    //   });\n    //\n    //   document.getElementById(\"pauseAudio\").addEventListener(\"click\", function () {\n    //     ee.emit(\"pause\");\n    //   });\n    //\n    //\n    // });\n  }\n\n  open(content) {\n    this.modalService.open(content, {\n      ariaLabelledBy: 'modal-basic-title'\n    }).result.then(result => {}, reason => {});\n  } //\n  // playSound(){\n  //   let audio = new Audio();\n  //   audio.src = \"../assets/audio/creative_minds.mp3\";\n  //   audio.load();\n  //   audio.play();\n  //\n  // }\n  //\n  // stopSound(){\n  //   let audio = new Audio();\n  //\n  //   audio.pause();\n  //   audio.currentTime = 0;\n  //\n  // }\n  //\n  // activateSoundWaves(){\n  //   const soundWaves = document.getElementById(\"soundwavesWrapper\");\n  //\n  //    soundWaves.classList.remove('onClickWrapper');\n  //    soundWaves.classList.add(\"wrapper\");\n  //  }\n  // stopRecording() {\n  //   this.audioRecorderService.stopRecording(OutputFormat.WEBM_BLOB).then((output) => {\n  //     // do post output steps\n  //   }).catch(errrorCase => {\n  //     // Handle Error\n  //   });\n  // }\n\n\n  getSelectedColor() {\n    return this.cardColor;\n  }\n\n  buttonEditing() {\n    this.router.navigateByUrl('editing');\n  }\n\n};\n\n__decorate([Input()], RecDoneComponent.prototype, \"responses\", void 0);\n\nRecDoneComponent = __decorate([Component({\n  selector: 'app-rec-done',\n  templateUrl: './rec-done.component.html',\n  styleUrls: ['./rec-done.component.css']\n})], RecDoneComponent);\nexport { RecDoneComponent };","map":null,"metadata":{},"sourceType":"module"}