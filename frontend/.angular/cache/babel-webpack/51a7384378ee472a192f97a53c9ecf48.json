{"ast":null,"code":"import { Action } from \"../../internal/Action.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { clip, clipEvenOdd } from \"../../qualifiers/flag.js\";\n/**\n * @description  Defines the clipping path to use when trimming pixels.\n * @extends SDK.Action\n * @memberOf Actions.PSDTools\n * @see Visit {@link Actions.PSDTools| PSDTools} for an example\n */\n\nclass ClipAction extends Action {\n  constructor() {\n    super();\n    this.isEvenOdd = false;\n  }\n  /**\n   * @description The name of the path to clip by\n   * @param {string} path\n   * @return {this}\n   */\n\n\n  byName(path) {\n    this.path = path;\n    return this;\n  }\n  /**\n   * @description The index of the path to clip by\n   * @param {number} path\n   * @return {this}\n   */\n\n\n  byIndex(path) {\n    this.path = path;\n    return this;\n  }\n  /**\n   * @description Trims pixels according to a clipping path included in the original image using an evenodd clipping rule.\n   * @return {this}\n   */\n\n\n  evenOdd() {\n    this.isEvenOdd = true;\n    return this;\n  }\n\n  prepareQualifiers() {\n    let qualifierValue;\n\n    if (typeof this.path === 'string') {\n      qualifierValue = new QualifierValue(['name', this.path]).setDelimiter(':');\n    } else {\n      qualifierValue = new QualifierValue(this.path);\n    } //handles flag\n\n\n    if (this.isEvenOdd) {\n      this.addFlag(clipEvenOdd());\n    } else {\n      this.addFlag(clip());\n    }\n\n    this.addQualifier(new Qualifier('pg', qualifierValue));\n    return this;\n  }\n\n}\n\nexport { ClipAction };","map":null,"metadata":{},"sourceType":"module"}