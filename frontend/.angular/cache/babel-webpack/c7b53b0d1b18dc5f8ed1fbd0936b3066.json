{"ast":null,"code":"import _defaults from \"lodash.defaultsdeep\";\nimport createElement from \"virtual-dom/create-element\";\nimport EventEmitter from \"event-emitter\";\nimport Playlist from \"./Playlist\";\nexport function init(options = {}, ee = EventEmitter()) {\n  if (options.container === undefined) {\n    throw new Error(\"DOM element container must be given.\");\n  }\n\n  window.OfflineAudioContext = window.OfflineAudioContext || window.webkitOfflineAudioContext;\n  window.AudioContext = window.AudioContext || window.webkitAudioContext;\n  const audioContext = new window.AudioContext();\n  const defaults = {\n    ac: audioContext,\n    sampleRate: audioContext.sampleRate,\n    samplesPerPixel: 4096,\n    mono: true,\n    fadeType: \"logarithmic\",\n    exclSolo: false,\n    timescale: false,\n    controls: {\n      show: false,\n      width: 150,\n      widgets: {\n        muteOrSolo: true,\n        volume: true,\n        stereoPan: true,\n        collapse: true,\n        remove: true\n      }\n    },\n    colors: {\n      waveOutlineColor: \"white\",\n      timeColor: \"grey\",\n      fadeColor: \"black\"\n    },\n    seekStyle: \"line\",\n    waveHeight: 128,\n    collapsedWaveHeight: 30,\n    barWidth: 1,\n    barGap: 0,\n    state: \"cursor\",\n    zoomLevels: [512, 1024, 2048, 4096],\n    annotationList: {\n      annotations: [],\n      controls: [],\n      editable: false,\n      linkEndpoints: false,\n      isContinuousPlay: false\n    },\n    isAutomaticScroll: false\n  };\n\n  const config = _defaults({}, options, defaults);\n\n  const zoomIndex = config.zoomLevels.indexOf(config.samplesPerPixel);\n\n  if (zoomIndex === -1) {\n    throw new Error(\"initial samplesPerPixel must be included in array zoomLevels\");\n  }\n\n  const playlist = new Playlist();\n  playlist.setSampleRate(config.sampleRate);\n  playlist.setSamplesPerPixel(config.samplesPerPixel);\n  playlist.setAudioContext(config.ac);\n  playlist.setEventEmitter(ee);\n  playlist.setUpEventEmitter();\n  playlist.setTimeSelection(0, 0);\n  playlist.setState(config.state);\n  playlist.setControlOptions(config.controls);\n  playlist.setWaveHeight(config.waveHeight);\n  playlist.setCollapsedWaveHeight(config.collapsedWaveHeight);\n  playlist.setColors(config.colors);\n  playlist.setZoomLevels(config.zoomLevels);\n  playlist.setZoomIndex(zoomIndex);\n  playlist.setMono(config.mono);\n  playlist.setExclSolo(config.exclSolo);\n  playlist.setShowTimeScale(config.timescale);\n  playlist.setSeekStyle(config.seekStyle);\n  playlist.setAnnotations(config.annotationList);\n  playlist.setBarGap(config.barGap);\n  playlist.setBarWidth(config.barWidth);\n  playlist.isAutomaticScroll = config.isAutomaticScroll;\n  playlist.isContinuousPlay = config.isContinuousPlay;\n  playlist.linkedEndpoints = config.linkedEndpoints; // take care of initial virtual dom rendering.\n\n  const tree = playlist.render();\n  const rootNode = createElement(tree);\n  config.container.appendChild(rootNode);\n  playlist.tree = tree;\n  playlist.rootNode = rootNode;\n  return playlist;\n}\nexport default function (options = {}, ee = EventEmitter()) {\n  return init(options, ee);\n}","map":null,"metadata":{},"sourceType":"module"}