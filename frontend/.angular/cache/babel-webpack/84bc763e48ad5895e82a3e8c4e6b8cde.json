{"ast":null,"code":"/**\n * Create a copy of the source object with all keys in camelCase\n * @function Util.withCamelCaseKeys\n * @return {Object} a new object\n * @param source\n */\nimport { isEmpty } from \"./isEmpty.js\";\nexport const withCamelCaseKeys = function (source) {\n  return convertKeys(source, camelCase);\n};\n/**\n * Convert string to camelCase\n * @function Util.camelCase\n * @param {string} source - the string to convert\n * @return {string} in camelCase format\n */\n\nexport const camelCase = function (source) {\n  var words = source.match(reWords);\n  words = words.map(word => word.charAt(0).toLocaleUpperCase() + word.slice(1).toLocaleLowerCase());\n  words[0] = words[0].toLocaleLowerCase();\n  return words.join('');\n};\n/**\n * Creates a new object from source, with the keys transformed using the converter.\n * @param {object} source\n * @param {function|null} converter\n * @returns {object}\n */\n\nexport var convertKeys = function (source, converter) {\n  var result, value;\n  result = {};\n\n  for (let key in source) {\n    value = source[key];\n\n    if (converter) {\n      key = converter(key);\n    }\n\n    if (!isEmpty(key)) {\n      // @ts-ignore\n      result[key] = value;\n    }\n  }\n\n  return result;\n};\nexport var reWords = function () {\n  var lower, upper;\n  upper = '[A-Z]';\n  lower = '[a-z]+';\n  return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');\n}();\nexport function identity(x) {\n  return x;\n}\nexport function contains(a, obj) {\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] === obj) {\n      return true;\n    }\n  }\n\n  return false;\n}\nexport function difference(arr1, arr2) {\n  return arr1.filter(x => !arr2.includes(x));\n}","map":null,"metadata":{},"sourceType":"module"}