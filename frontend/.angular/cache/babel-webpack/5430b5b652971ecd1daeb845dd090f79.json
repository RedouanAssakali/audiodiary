{"ast":null,"code":"import { FADEIN, FADEOUT, SCURVE, LINEAR, EXPONENTIAL, LOGARITHMIC } from \"fade-maker\";\nimport { sCurve, logarithmic, linear, exponential } from \"fade-curves\";\n/*\n * virtual-dom hook for drawing the fade curve to the canvas element.\n */\n\nclass FadeCanvasHook {\n  constructor(type, shape, duration, samplesPerPixel) {\n    this.type = type;\n    this.shape = shape;\n    this.duration = duration;\n    this.samplesPerPixel = samplesPerPixel;\n  }\n\n  static createCurve(shape, type, width) {\n    let reflection;\n    let curve;\n\n    switch (type) {\n      case FADEIN:\n        {\n          reflection = 1;\n          break;\n        }\n\n      case FADEOUT:\n        {\n          reflection = -1;\n          break;\n        }\n\n      default:\n        {\n          throw new Error(\"Unsupported fade type.\");\n        }\n    }\n\n    switch (shape) {\n      case SCURVE:\n        {\n          curve = sCurve(width, reflection);\n          break;\n        }\n\n      case LINEAR:\n        {\n          curve = linear(width, reflection);\n          break;\n        }\n\n      case EXPONENTIAL:\n        {\n          curve = exponential(width, reflection);\n          break;\n        }\n\n      case LOGARITHMIC:\n        {\n          curve = logarithmic(width, 10, reflection);\n          break;\n        }\n\n      default:\n        {\n          throw new Error(\"Unsupported fade shape\");\n        }\n    }\n\n    return curve;\n  }\n\n  hook(canvas, prop, prev) {\n    // node is up to date.\n    if (prev !== undefined && prev.shape === this.shape && prev.type === this.type && prev.duration === this.duration && prev.samplesPerPixel === this.samplesPerPixel) {\n      return;\n    }\n\n    const ctx = canvas.getContext(\"2d\");\n    const width = canvas.width;\n    const height = canvas.height;\n    const curve = FadeCanvasHook.createCurve(this.shape, this.type, width);\n    const len = curve.length;\n    let y = height - curve[0] * height;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.save();\n    ctx.strokeStyle = \"black\";\n    ctx.beginPath();\n    ctx.moveTo(0, y);\n\n    for (let i = 1; i < len; i += 1) {\n      y = height - curve[i] * height;\n      ctx.lineTo(i, y);\n    }\n\n    ctx.stroke();\n    ctx.restore();\n  }\n\n}\n\nexport default FadeCanvasHook;","map":null,"metadata":{},"sourceType":"module"}