{"ast":null,"code":"// Maps a virtual DOM tree onto a real DOM tree in an efficient manner.\n// We don't want to read all of the DOM nodes in the tree so we use\n// the in-order tree indexing to eliminate recursion down certain branches.\n// We only recurse into a DOM node if we know that it contains a child of\n// interest.\nvar noChild = {};\nmodule.exports = domIndex;\n\nfunction domIndex(rootNode, tree, indices, nodes) {\n  if (!indices || indices.length === 0) {\n    return {};\n  } else {\n    indices.sort(ascending);\n    return recurse(rootNode, tree, indices, nodes, 0);\n  }\n}\n\nfunction recurse(rootNode, tree, indices, nodes, rootIndex) {\n  nodes = nodes || {};\n\n  if (rootNode) {\n    if (indexInRange(indices, rootIndex, rootIndex)) {\n      nodes[rootIndex] = rootNode;\n    }\n\n    var vChildren = tree.children;\n\n    if (vChildren) {\n      var childNodes = rootNode.childNodes;\n\n      for (var i = 0; i < tree.children.length; i++) {\n        rootIndex += 1;\n        var vChild = vChildren[i] || noChild;\n        var nextIndex = rootIndex + (vChild.count || 0); // skip recursion down the tree if there are no nodes down here\n\n        if (indexInRange(indices, rootIndex, nextIndex)) {\n          recurse(childNodes[i], vChild, indices, nodes, rootIndex);\n        }\n\n        rootIndex = nextIndex;\n      }\n    }\n  }\n\n  return nodes;\n} // Binary search for an index in the interval [left, right]\n\n\nfunction indexInRange(indices, left, right) {\n  if (indices.length === 0) {\n    return false;\n  }\n\n  var minIndex = 0;\n  var maxIndex = indices.length - 1;\n  var currentIndex;\n  var currentItem;\n\n  while (minIndex <= maxIndex) {\n    currentIndex = (maxIndex + minIndex) / 2 >> 0;\n    currentItem = indices[currentIndex];\n\n    if (minIndex === maxIndex) {\n      return currentItem >= left && currentItem <= right;\n    } else if (currentItem < left) {\n      minIndex = currentIndex + 1;\n    } else if (currentItem > right) {\n      maxIndex = currentIndex - 1;\n    } else {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction ascending(a, b) {\n  return a > b ? 1 : -1;\n}","map":null,"metadata":{},"sourceType":"script"}