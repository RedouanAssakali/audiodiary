{"ast":null,"code":"import { HtmlImageLayer, cancelCurrentlyRunningPlugins, HtmlVideoLayer } from '@cloudinary/html';\nimport * as ɵngcc0 from '@angular/core';\nexport { accessibility, lazyload, placeholder, responsive } from '@cloudinary/html';\nimport { VERSION, Component, ElementRef, Input, EventEmitter, Output, enableProdMode, NgModule } from '@angular/core';\nimport '@cloudinary/url-gen/assets/CloudinaryImage';\nimport '@cloudinary/url-gen';\nlet APP_VERSION = '1.0.1';\n/**\n * Used by SDK Analytics as a token (?a_{token})\n */\n\nconst SDKAnalyticsConstants = {\n  sdkSemver: APP_VERSION,\n  techVersion: VERSION.full,\n  sdkCode: 'K'\n};\n/**\n * @mixin AngularSDK\n * @description The Cloudinary Angular SDK contains components like \\<advanced-image\\> to easily render your media assets from\n * Cloudinary. The SDK also comes with support for optional JS plugins that make the components smart, with features\n * like lazy loading, placeholder, accessibility & responsiveness.\n *\n * @example\n * <caption>\n *  Please note that the order of the plugins is important. See {@link https://cloudinary.com/documentation/sdks/js/frontend-frameworks/index.html#plugin-order|Plugin Order} for more details.\n * </caption>\n * // In your app.module.ts inject the library.\n * import { CloudinaryModule} from '@cloudinary/angular';\n *\n * imports: [\n *   ...,\n *   CloudinaryModule,\n * ],\n *\n * // In your component.ts use `@cloudinary/url-gen` to generate your transformations.\n * // Import the plugins you wish to use\n *\n * import {CloudinaryImage} from \"@cloudinary/url-gen/assets/CloudinaryImage\";\n * import {\n *  AdvancedImage,\n *  accessibility,\n *  responsive,\n *  lazyload,\n *  placeholder\n * } from '@cloudinary/angular';\n *\n * ngOnInit() {\n *   const myCld = new Cloudinary({ cloudName: 'demo'});\n *   this.img = myCld().image('sample');\n *\n *   this.plugins = [lazyload(), placeholder()]\n * }\n *\n * // In your view add the component with your transformation.\n * <advanced-image [cldImg]=\"this.img\" [plugins]=\"this.plugins\"></advanced-image>\n */\n\n/**\n * @memberOf AngularSDK\n * @type {Component}\n * @description The Cloudinary image component.\n * @prop {CloudinaryImage} transformation Generated by @cloudinary/url-gen\n * @prop {Plugins} plugins Advanced image component plugins accessibility(), responsive(), lazyload(), placeholder()\n * @prop imageAttributes Optional attributes include alt, width, height, loading\n */\n\nlet CloudinaryImageComponent = /*#__PURE__*/(() => {\n  class CloudinaryImageComponent {\n    constructor(el) {\n      this.el = el;\n    }\n    /**\n     * On init creates a new HTMLLayer instance and initializes with ref to img element,\n     * user generated cloudinaryImage and the plugins to be used.\n     */\n\n\n    ngOnInit() {\n      this.htmlLayerInstance = new HtmlImageLayer(this.el.nativeElement.children[0], this.cldImg, this.plugins, SDKAnalyticsConstants);\n      this.addAttributes();\n    }\n    /**\n     * On update, we cancel running plugins and update the image instance with the state of user\n     * cloudinaryImage and the state of plugins.\n     */\n\n\n    ngOnChanges() {\n      if (this.htmlLayerInstance) {\n        cancelCurrentlyRunningPlugins(this.htmlLayerInstance.htmlPluginState);\n        this.htmlLayerInstance.update(this.cldImg, this.plugins, SDKAnalyticsConstants);\n      }\n    }\n    /**\n     * On destroy, we cancel the currently running plugins.\n     */\n\n\n    ngOnDestroy() {\n      // safely cancel running events on destroy\n      cancelCurrentlyRunningPlugins(this.htmlLayerInstance.htmlPluginState);\n    }\n    /**\n     * Add attributes to img element.\n     */\n\n\n    addAttributes() {\n      ['alt', 'width', 'height', 'loading'].forEach(attr => {\n        if (this[attr]) {\n          this.el.nativeElement.children[0].setAttribute(attr, this[attr]);\n          this.el.nativeElement.removeAttribute(attr);\n        }\n      });\n    }\n\n  }\n\n  CloudinaryImageComponent.ɵfac = function CloudinaryImageComponent_Factory(t) {\n    return new (t || CloudinaryImageComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  CloudinaryImageComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: CloudinaryImageComponent,\n    selectors: [[\"advanced-image\"]],\n    inputs: {\n      cldImg: \"cldImg\",\n      plugins: \"plugins\",\n      alt: \"alt\",\n      width: \"width\",\n      height: \"height\",\n      loading: \"loading\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 1,\n    vars: 0,\n    template: function CloudinaryImageComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelement(0, \"img\");\n      }\n    },\n    styles: [\"[_nghost-%COMP%]{display:block}\"]\n  });\n  return CloudinaryImageComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @memberOf AngularSDK\n * @type {Component}\n * @description The Cloudinary video component.\n * @prop {CloudinaryVideo} transformation Generated by @cloudinary/url-gen\n * @prop {Plugins} plugins Advanced image component plugins lazyload()\n * @prop videoAttributes Optional attributes include controls, loop, muted, poster, preload, autoplay\n * @prop videoEvents Optional video events include play, loadstart, playing, error, ended\n * @prop {VideoSources} sources Optional sources to generate\n * @example\n *  <caption>\n *  Using custom defined resources.\n * </caption>\n *   vid = new CloudinaryVideo('dog', {cloudName: 'demo'});\n *   sources = [\n {\n        type: 'mp4',\n        codecs: ['vp8', 'vorbis'],\n        transcode: videoCodec(auto())\n},\n {\n        type: 'webm',\n        codecs: ['avc1.4D401E', 'mp4a.40.2'],\n         transcode: videoCodec(auto())\n      }];\n *\n * <advanced-video [cldvid]=\"vid\" [sources]=\"sources\" controls></advanced-video>\n */\n\n\nlet CloudinaryVideoComponent = /*#__PURE__*/(() => {\n  class CloudinaryVideoComponent {\n    constructor(el) {\n      this.el = el; // Event emitters\n\n      this.play = new EventEmitter();\n      this.loadstart = new EventEmitter();\n      this.playing = new EventEmitter();\n      this.error = new EventEmitter();\n      this.ended = new EventEmitter(); // supported video attributes\n\n      this.controls = this.el.nativeElement.attributes.controls;\n      this.loop = this.el.nativeElement.attributes.loop;\n      this.muted = this.el.nativeElement.attributes.muted;\n      this.preload = this.el.nativeElement.attributes.preload;\n      this.autoPlay = this.el.nativeElement.attributes.autoplay;\n      this.playsInline = this.el.nativeElement.attributes.playsInline;\n    }\n    /**\n     * On init creates a new HTMLVideoLayer instance and initializes with ref to video element,\n     * user generated cloudinaryVideo and the plugins to be used.\n     */\n\n\n    ngOnInit() {\n      this.htmlVideoLayerInstance = new HtmlVideoLayer(this.el.nativeElement.children[0], this.cldVid, this.sources, this.plugins, this.getVideoAttributes());\n    }\n    /**\n     * On update, we cancel running plugins and update the video instance if the src\n     * was changed.\n     */\n\n\n    ngOnChanges() {\n      if (this.htmlVideoLayerInstance) {\n        cancelCurrentlyRunningPlugins(this.htmlVideoLayerInstance.htmlPluginState);\n        this.htmlVideoLayerInstance.update(this.cldVid, this.sources, this.plugins, this.getVideoAttributes());\n      }\n    }\n    /**\n     * On destroy, we cancel the currently running plugins.\n     */\n\n\n    ngOnDestroy() {\n      // Safely cancel running events on destroy\n      cancelCurrentlyRunningPlugins(this.htmlVideoLayerInstance.htmlPluginState);\n    }\n    /**\n     * Returns video attributes.\n     */\n\n\n    getVideoAttributes() {\n      return {\n        controls: this.controls,\n        loop: this.loop,\n        muted: this.muted,\n        poster: this.poster,\n        preload: this.preload,\n        autoplay: this.autoPlay,\n        playsinline: this.playsInline\n      };\n    }\n\n    emitPlayEvent() {\n      this.play.emit();\n    }\n\n    emitLoadstartEvent() {\n      this.loadstart.emit();\n    }\n\n    emitPlayingEvent() {\n      this.playing.emit();\n    }\n\n    emitErrorEvent() {\n      this.error.emit();\n    }\n\n    emitEndedEvent() {\n      this.ended.emit();\n    }\n\n  }\n\n  CloudinaryVideoComponent.ɵfac = function CloudinaryVideoComponent_Factory(t) {\n    return new (t || CloudinaryVideoComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  CloudinaryVideoComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: CloudinaryVideoComponent,\n    selectors: [[\"advanced-video\"]],\n    inputs: {\n      cldVid: \"cldVid\",\n      sources: \"sources\",\n      plugins: \"plugins\",\n      poster: \"poster\"\n    },\n    outputs: {\n      play: \"play\",\n      loadstart: \"loadstart\",\n      playing: \"playing\",\n      error: \"error\",\n      ended: \"ended\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 1,\n    vars: 0,\n    consts: [[3, \"play\", \"loadstart\", \"playing\", \"error\", \"ended\"]],\n    template: function CloudinaryVideoComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"video\", 0);\n        ɵngcc0.ɵɵlistener(\"play\", function CloudinaryVideoComponent_Template_video_play_0_listener() {\n          return ctx.emitPlayEvent();\n        })(\"loadstart\", function CloudinaryVideoComponent_Template_video_loadstart_0_listener() {\n          return ctx.emitLoadstartEvent();\n        })(\"playing\", function CloudinaryVideoComponent_Template_video_playing_0_listener() {\n          return ctx.emitPlayingEvent();\n        })(\"error\", function CloudinaryVideoComponent_Template_video_error_0_listener() {\n          return ctx.emitErrorEvent;\n        })(\"ended\", function CloudinaryVideoComponent_Template_video_ended_0_listener() {\n          return ctx.emitEndedEvent;\n        });\n        ɵngcc0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2\n  });\n  return CloudinaryVideoComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Enables production mode. Added to remove\n * ng reflects from dom.\n */\n\n\nenableProdMode();\nlet CloudinaryModule = /*#__PURE__*/(() => {\n  class CloudinaryModule {}\n\n  CloudinaryModule.ɵfac = function CloudinaryModule_Factory(t) {\n    return new (t || CloudinaryModule)();\n  };\n\n  CloudinaryModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: CloudinaryModule\n  });\n  CloudinaryModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[]]\n  });\n  return CloudinaryModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CloudinaryModule, {\n    declarations: [CloudinaryImageComponent, CloudinaryVideoComponent],\n    exports: [CloudinaryImageComponent, CloudinaryVideoComponent]\n  });\n})();\n/*\n * Public API Surface of cloudinary-library\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CloudinaryImageComponent, CloudinaryModule, CloudinaryVideoComponent }; //# sourceMappingURL=cloudinary-ng.js.map","map":null,"metadata":{},"sourceType":"module"}