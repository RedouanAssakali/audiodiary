{"ast":null,"code":"import { Action } from \"../../internal/Action.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { animatedWebP } from \"../../qualifiers/flag.js\";\nimport { animated } from \"../../qualifiers/flag.js\";\n/**\n * @extends SDK.Action\n * @memberOf Actions.Transcode\n * @description Converts a video to an animated webp or gif.\n * The resulting transformation includes format (f_format) and the animated flag (fl_animated).\n * The flag fl_awebp is added only when an animated webp is requested.\n * @see Visit {@link Actions.Transcode|Transcode} for an example\n */\n\nclass ToAnimatedAction extends Action {\n  constructor(animatedFormat = '') {\n    super();\n\n    if (animatedFormat.toString() === 'webp') {\n      this.addFlag(animatedWebP());\n    }\n\n    this.addFlag(animated());\n\n    if (animatedFormat) {\n      this.addQualifier(new Qualifier('f', animatedFormat));\n    }\n  }\n  /**\n   * @description Sets the time between frames.\n   * @param delayValue The time in milliseconds.\n   */\n\n\n  delay(delayValue) {\n    this.addQualifier(new Qualifier('dl', delayValue));\n    return this;\n  }\n  /**\n   * @description Sets the frequency at which the video is sampled.\n   * @param sampling As a string (e.g. '2.3s'), samples one frame every 2.3 seconds.<br>As a number (e.g. 20),\n   * samples that many equally spaced frames over the duration of the video.\n   */\n\n\n  sampling(sampling) {\n    this.addQualifier(new Qualifier('vs', sampling));\n    return this;\n  }\n\n}\n\nexport default ToAnimatedAction;","map":null,"metadata":{},"sourceType":"module"}