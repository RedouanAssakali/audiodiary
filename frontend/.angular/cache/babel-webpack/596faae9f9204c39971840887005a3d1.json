{"ast":null,"code":"import { BaseSource } from \"../BaseSource.js\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.BaseSource}\n * @description Defines how to manipulate an image layer\n * <div class=\"panel panel-warning\">\n *   <div class=\"panel-heading\">Notice</div>\n *   <div class=\"panel-body\">\n *     This class is used as a Qualifier for the asset.overlay() and asset.underlay() methods.</br>\n *     You can find regular images and videos transformations below:\n *   </div>\n  *   <ul>\n *     <li>{@link SDK.ImageTransformation| Image Transformations}</li>\n *     <li>{@link SDK.VideoTransformation| Video Transformations}\n *   </ul>\n * </div>\n */\n\nclass ImageSource extends BaseSource {\n  constructor(publicID) {\n    super();\n    this._publicID = publicID;\n  }\n  /**\n   * @description\n   * Returns the opening string of the layer,\n   * This method is used internally within {@link SDK.LayerAction|LayerAction}\n   * @returns {string}\n   */\n\n\n  getOpenSourceString(layerType) {\n    const encodedPublicID = this.encodeAssetPublicID(this._publicID);\n\n    if (this._format) {\n      return `${layerType}_${encodedPublicID}.${this._format.toString()}`;\n    } else {\n      return `${layerType}_${encodedPublicID}`;\n    }\n  }\n  /**\n   * @description\n   * Apply a format for the image source of the layer\n   * @param {FormatQualifier} format A to apply to the layered image, see more {@link Qualifiers.Format|here}\n   * @returns {this}\n   */\n\n\n  format(format) {\n    this._format = format;\n    return this;\n  }\n\n}\n\nexport { ImageSource };","map":null,"metadata":{},"sourceType":"module"}