{"ast":null,"code":"import { FlagQualifier } from \"../qualifiers/flag/FlagQualifier.js\";\nimport { Qualifier } from \"./qualifier/Qualifier.js\";\nimport { mapToSortedArray } from \"./utils/dataStructureUtils.js\";\nimport { createUnsupportedError } from \"./utils/unsupportedError.js\";\n/**\n * @summary SDK\n * @memberOf SDK\n * @description Defines the category of transformation to perform.\n */\n\nclass Action {\n  constructor() {\n    this._actionModel = {}; // Action model representation\n    // We're using map, to overwrite existing keys. for example:\n    // addParam(w_100).addQualifier(w_200) should result in w_200. and not w_100,w_200\n\n    this.qualifiers = new Map(); // Unlike regular qualifiers, there can be multiple flags in each url component /fl_1,fl_2/\n    // If the falgs are added to the qualifiers map, only a single flag could exist in a component (it's a map)\n    // So flags are stored separately until the very end because of that reason\n\n    this.flags = [];\n    this.delimiter = ','; // {qualifier}{delimiter}{qualifier} for example: `${'w_100'}${','}${'c_fill'}`\n\n    this.actionTag = ''; // A custom name tag to identify this action in the future\n  }\n\n  prepareQualifiers() {}\n  /**\n   * @description Returns the custom name tag that was given to this action\n   * @return {string}\n   */\n\n\n  getActionTag() {\n    return this.actionTag;\n  }\n  /**\n   * @description Sets the custom name tag for this action\n   * @return {this}\n   */\n\n\n  setActionTag(tag) {\n    this.actionTag = tag;\n    return this;\n  }\n  /**\n   * @description Calls toString() on all child qualifiers (implicitly by using .join()).\n   * @return {string}\n   */\n\n\n  toString() {\n    this.prepareQualifiers();\n    return mapToSortedArray(this.qualifiers, this.flags).join(this.delimiter);\n  }\n  /**\n   * @description Adds the parameter to the action.\n   * @param {SDK.Qualifier} qualifier\n   * @return {this}\n   */\n\n\n  addQualifier(qualifier) {\n    // if string, find the key and value\n    if (typeof qualifier === 'string') {\n      const [key, value] = qualifier.toLowerCase().split('_');\n\n      if (key === 'fl') {\n        // if string qualifier is a flag, store it in the flags arrays\n        this.flags.push(new FlagQualifier(value));\n      } else {\n        // if the string qualifier is not a flag, create a new qualifier from it\n        this.qualifiers.set(key, new Qualifier(key, value));\n      }\n    } else {\n      // if a qualifier object, insert to the qualifiers map\n      this.qualifiers.set(qualifier.key, qualifier);\n    }\n\n    return this;\n  }\n  /**\n   * @description Adds a flag to the current action.\n   * @param {Qualifiers.Flag} flag\n   * @return {this}\n   */\n\n\n  addFlag(flag) {\n    if (typeof flag === 'string') {\n      this.flags.push(new FlagQualifier(flag));\n    } else {\n      if (flag instanceof FlagQualifier) {\n        this.flags.push(flag);\n      }\n    }\n\n    return this;\n  }\n\n  toJson() {\n    if (this._actionModel.actionType) {\n      return this._actionModel;\n    }\n\n    return {\n      error: createUnsupportedError(`unsupported action ${this.constructor.name}`)\n    };\n  }\n\n  addValueToQualifier(qualifierKey, qualifierValue) {\n    this.qualifiers.get(qualifierKey).addValue(qualifierValue);\n    return this;\n  }\n\n}\n\nexport { Action };","map":null,"metadata":{},"sourceType":"module"}