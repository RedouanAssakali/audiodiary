{"ast":null,"code":"import { Action } from \"../internal/Action.js\";\nimport { QualifierValue } from \"../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../internal/qualifier/Qualifier.js\";\nimport { prepareColor } from \"../internal/utils/prepareColor.js\";\n/**\n * @description Adds a solid border around an image or video.\n *\n *  <b>Learn more:</b>\n * {@link https://cloudinary.com/documentation/image_transformations#adding_image_borders|Adding image borders}\n * @memberOf Actions\n * @namespace Border\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {solid} from \"@cloudinary/url-gen/actions/border\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.border(\n *  solid(15, 'green'),\n *  // Or alternatively\n *  solid().width(15).color('green')\n * );\n *\n */\n\n/**\n * @memberOf Actions.Border\n * @see Actions.Border\n * @example\n * // Used through a builder function Border.solid(), and not by creating a new instance\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.border(\n *  Border.solid(15, 'green'),\n *  // Or alternatively\n *  Border.solid().width(15).color('green')\n * );\n */\n\nclass BorderAction extends Action {\n  /**\n   * @description Adds a border of the specified type around an image or video.\n   * @param {'solid'} borderType The type of border (currently only 'solid' is supported). Use values in {@link Qualifiers.Border|Border Values}.\n   * @param {string} color The color of the border.\n   * @param {number} borderWidth The width in pixels.\n   */\n  constructor(borderType, color, borderWidth) {\n    super();\n    this.borderType = borderType;\n    this.borderColor = prepareColor(color);\n    this.borderWidth = borderWidth;\n  }\n  /**\n   * @description Sets the width of the border\n   * @param {number | string} borderWidth The width in pixels.\n   */\n\n\n  width(borderWidth) {\n    this.borderWidth = borderWidth;\n    return this;\n  }\n  /**\n   * @description Sets the color of the border.\n   * @param {string} borderColor The color of the border.\n   */\n\n\n  color(borderColor) {\n    this.borderColor = prepareColor(borderColor);\n    return this;\n  }\n  /**\n   * @description Rounds the specified corners of an image.\n   * @param {RoundCornersAction} roundCorners\n   * @return {this}\n   */\n\n\n  roundCorners(roundCorners) {\n    this._roundCorners = roundCorners;\n    return this;\n  }\n\n  prepareQualifiers() {\n    const qualifierValue = new QualifierValue([`${this.borderWidth}px`, this.borderType, `${this.borderColor}`]).setDelimiter('_');\n    this.addQualifier(new Qualifier('bo', qualifierValue));\n\n    if (this._roundCorners) {\n      this.addQualifier(this._roundCorners.qualifiers.get('r'));\n    }\n  }\n\n}\n/**\n * @summary action\n * @memberOf Actions.Border\n * @description Sets the style of the border.\n * @param {number | string} width The width in pixels.\n * @param {string} color The color of the border, e.g 'green', 'yellow'.\n * @return {Actions.Border.BorderAction}\n */\n\n\nfunction solid(width, color) {\n  return new BorderAction('solid', color, width);\n}\n\nconst Border = {\n  solid\n};\nexport { BorderAction, Border, solid };","map":null,"metadata":{},"sourceType":"module"}