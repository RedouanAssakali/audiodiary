{"ast":null,"code":"import { CONDITIONAL_OPERATORS, RESERVED_NAMES } from \"../internal/internalConstants.js\";\nimport { ExpressionQualifier } from \"./expression/ExpressionQualifier.js\";\n/**\n * @description\n * Used for variable or conditional expressions\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/user_defined_variables#arithmetic_expressions|Arithmetic expressions }\n * @namespace Expression\n * @memberOf Qualifiers\n */\n\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Expression\n * @return {Qualifiers.Expression.ExpressionQualifier}\n */\n\nfunction expression(exp) {\n  // Prepare the CONDITIONAL_OPERATORS object to be used in a regex\n  // Properly escape |, +, ^ and *\n  // This step also adds a regex space ( \\s ) around each operator, since these are only replaced when wrapped with spaces\n  // $foo * $bar is replaced to $foo_mul_$bar\n  // $foo*bar is treated AS-IS.\n  const reservedOperatorList = Object.keys(CONDITIONAL_OPERATORS).map(key => {\n    return `\\\\s${key.replace(/(\\*|\\+|\\^|\\|)/g, '\\\\$1')}\\\\s`;\n  }); // reservedOperatorList is now an array of values, joining with | creates the regex list\n\n  const regexSafeOperatorList = reservedOperatorList.join('|');\n  const operatorsReplaceRE = new RegExp(`(${regexSafeOperatorList})`, \"g\"); // First, we replace all the operators\n  // Notice how we pad the matched operators with `_`, this is following the step above.\n  // This turns $foo * $bar into $foo_mul_$bar (notice how the spaces were replaced with an underscore\n\n  const stringWithOperators = exp.toString().replace(operatorsReplaceRE, match => {\n    // match contains spaces around the expression, we need to trim it as the original list\n    // does not contain spaces.\n    return `_${CONDITIONAL_OPERATORS[match.trim()]}_`;\n  }); // Handle reserved names (width, height, etc.)\n\n  const ReservedNames = Object.keys(RESERVED_NAMES);\n  const regexSafeReservedNameList = ReservedNames.join('|'); // Gather all statements that begin with a dollar sign, underscore or a space\n  // Gather all RESERVED NAMES\n  // $foo_bar is matched\n  // height is matched\n\n  const reservedNamesRE = new RegExp(`(\\\\$_*[^_ ]+)|${regexSafeReservedNameList}`, \"g\"); // Since this regex captures both user variables and our reserved keywords, we need to add some logic in the replacer\n\n  const stringWithVariables = stringWithOperators.replace(reservedNamesRE, match => {\n    // Do not do anything to user variables (anything starting with $)\n    if (match.startsWith('$')) {\n      return match;\n    } else {\n      return RESERVED_NAMES[match] || match;\n    }\n  }); // Serialize remaining spaces with an underscore\n\n  const finalExpressionString = stringWithVariables.replace(/\\s/g, '_');\n  return new ExpressionQualifier(finalExpressionString);\n} // as a namespace\n\n\nconst Expression = {\n  expression\n};\nexport { Expression, expression };","map":null,"metadata":{},"sourceType":"module"}