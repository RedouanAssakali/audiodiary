{"ast":null,"code":"import { Action } from \"../internal/Action.js\";\nimport { Qualifier } from \"../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../internal/qualifier/QualifierValue.js\";\n/**\n * @description Delivers an animated GIF that contains additional loops of the GIF.\n * The total number of iterations is the number of additional loops plus one.\n * You can also specify the loop effect without a numeric value to instruct it to loop the GIF infinitely.\n *\n * @memberOf Actions\n * @namespace Animated\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {animated} from \"@cloudinary/url-gen/actions/animated\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.animated(edit().delay(200).loop(3)));\n */\n\n/**\n * @memberOf Actions.Animated\n * @see Actions.Animated\n * @example\n * // Used through a builder function Animated.edit(), and not by creating a new instance\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {edit} from \"@cloudinary/url-gen/actions/animated\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.animated(edit().delay(200).loop(3)));\n */\n\nclass AnimatedAction extends Action {\n  constructor() {\n    super();\n  }\n  /**\n   * @description Controls the time delay between the frames of an animated image, in milliseconds.\n   * @param {number} delayValue The delay in milliseconds\n   * @return {this}\n   */\n\n\n  delay(delayValue) {\n    this.addQualifier(new Qualifier('dl', delayValue));\n    return this;\n  }\n  /**\n   * @description Delivers an animated GIF that contains additional loops of the GIF.\n   * @param {number} additionalLoops The additional number of times to play the animated GIF.\n   * @return {this}\n   */\n\n\n  loop(additionalLoops) {\n    const qualifierValue = new QualifierValue(['loop', additionalLoops]).setDelimiter(':');\n    this.addQualifier(new Qualifier('e', qualifierValue));\n    return this;\n  }\n\n}\n/**\n * @summary action\n * @memberOf Actions.Animated\n * @description Delivers an animated GIF.\n * @return {Actions.Animated.AnimatedAction}\n */\n\n\nfunction edit() {\n  return new AnimatedAction();\n}\n\nconst Animated = {\n  edit\n};\nexport { AnimatedAction, Animated, edit };","map":null,"metadata":{},"sourceType":"module"}