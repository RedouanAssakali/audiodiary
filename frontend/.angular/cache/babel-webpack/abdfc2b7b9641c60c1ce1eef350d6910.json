{"ast":null,"code":"var document = require(\"global/document\");\n\nvar isArray = require(\"x-is-array\");\n\nvar render = require(\"./create-element\");\n\nvar domIndex = require(\"./dom-index\");\n\nvar patchOp = require(\"./patch-op\");\n\nmodule.exports = patch;\n\nfunction patch(rootNode, patches, renderOptions) {\n  renderOptions = renderOptions || {};\n  renderOptions.patch = renderOptions.patch && renderOptions.patch !== patch ? renderOptions.patch : patchRecursive;\n  renderOptions.render = renderOptions.render || render;\n  return renderOptions.patch(rootNode, patches, renderOptions);\n}\n\nfunction patchRecursive(rootNode, patches, renderOptions) {\n  var indices = patchIndices(patches);\n\n  if (indices.length === 0) {\n    return rootNode;\n  }\n\n  var index = domIndex(rootNode, patches.a, indices);\n  var ownerDocument = rootNode.ownerDocument;\n\n  if (!renderOptions.document && ownerDocument !== document) {\n    renderOptions.document = ownerDocument;\n  }\n\n  for (var i = 0; i < indices.length; i++) {\n    var nodeIndex = indices[i];\n    rootNode = applyPatch(rootNode, index[nodeIndex], patches[nodeIndex], renderOptions);\n  }\n\n  return rootNode;\n}\n\nfunction applyPatch(rootNode, domNode, patchList, renderOptions) {\n  if (!domNode) {\n    return rootNode;\n  }\n\n  var newNode;\n\n  if (isArray(patchList)) {\n    for (var i = 0; i < patchList.length; i++) {\n      newNode = patchOp(patchList[i], domNode, renderOptions);\n\n      if (domNode === rootNode) {\n        rootNode = newNode;\n      }\n    }\n  } else {\n    newNode = patchOp(patchList, domNode, renderOptions);\n\n    if (domNode === rootNode) {\n      rootNode = newNode;\n    }\n  }\n\n  return rootNode;\n}\n\nfunction patchIndices(patches) {\n  var indices = [];\n\n  for (var key in patches) {\n    if (key !== \"a\") {\n      indices.push(Number(key));\n    }\n  }\n\n  return indices;\n}","map":null,"metadata":{},"sourceType":"script"}