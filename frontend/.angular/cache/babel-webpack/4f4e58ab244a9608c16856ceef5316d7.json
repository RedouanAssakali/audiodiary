{"ast":null,"code":"var isObject = require(\"is-object\");\n\nvar isHook = require(\"../vnode/is-vhook.js\");\n\nmodule.exports = applyProperties;\n\nfunction applyProperties(node, props, previous) {\n  for (var propName in props) {\n    var propValue = props[propName];\n\n    if (propValue === undefined) {\n      removeProperty(node, propName, propValue, previous);\n    } else if (isHook(propValue)) {\n      removeProperty(node, propName, propValue, previous);\n\n      if (propValue.hook) {\n        propValue.hook(node, propName, previous ? previous[propName] : undefined);\n      }\n    } else {\n      if (isObject(propValue)) {\n        patchObject(node, props, previous, propName, propValue);\n      } else {\n        node[propName] = propValue;\n      }\n    }\n  }\n}\n\nfunction removeProperty(node, propName, propValue, previous) {\n  if (previous) {\n    var previousValue = previous[propName];\n\n    if (!isHook(previousValue)) {\n      if (propName === \"attributes\") {\n        for (var attrName in previousValue) {\n          node.removeAttribute(attrName);\n        }\n      } else if (propName === \"style\") {\n        for (var i in previousValue) {\n          node.style[i] = \"\";\n        }\n      } else if (typeof previousValue === \"string\") {\n        node[propName] = \"\";\n      } else {\n        node[propName] = null;\n      }\n    } else if (previousValue.unhook) {\n      previousValue.unhook(node, propName, propValue);\n    }\n  }\n}\n\nfunction patchObject(node, props, previous, propName, propValue) {\n  var previousValue = previous ? previous[propName] : undefined; // Set attributes\n\n  if (propName === \"attributes\") {\n    for (var attrName in propValue) {\n      var attrValue = propValue[attrName];\n\n      if (attrValue === undefined) {\n        node.removeAttribute(attrName);\n      } else {\n        node.setAttribute(attrName, attrValue);\n      }\n    }\n\n    return;\n  }\n\n  if (previousValue && isObject(previousValue) && getPrototype(previousValue) !== getPrototype(propValue)) {\n    node[propName] = propValue;\n    return;\n  }\n\n  if (!isObject(node[propName])) {\n    node[propName] = {};\n  }\n\n  var replacer = propName === \"style\" ? \"\" : undefined;\n\n  for (var k in propValue) {\n    var value = propValue[k];\n    node[propName][k] = value === undefined ? replacer : value;\n  }\n}\n\nfunction getPrototype(value) {\n  if (Object.getPrototypeOf) {\n    return Object.getPrototypeOf(value);\n  } else if (value.__proto__) {\n    return value.__proto__;\n  } else if (value.constructor) {\n    return value.constructor.prototype;\n  }\n}","map":null,"metadata":{},"sourceType":"script"}