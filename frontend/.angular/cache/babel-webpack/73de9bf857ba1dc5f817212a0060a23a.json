{"ast":null,"code":"import { Action } from \"../../internal/Action.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\n/**\n * @description Simulates the way an image would appear to someone with the specified color blind condition\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\n\nclass SimulateColorBlindEffectAction extends Action {\n  constructor() {\n    super();\n    this._actionModel = {};\n    this._actionModel.actionType = 'simulateColorblind';\n    this.addQualifier(new Qualifier('e', `simulate_colorblind`));\n  }\n\n  setQualifier(val) {\n    const strToAppend = `:${val}`;\n\n    if (val) {\n      this.addQualifier(new Qualifier('e', `simulate_colorblind${strToAppend}`));\n    }\n\n    return this;\n  }\n  /**\n   * @description Sets the color blind condition to simulate.\n   * @param {Qualifiers.simulateColorBlindValues | SimulateColorBlindType | string} cond\n   * @return {this}\n   */\n\n\n  condition(cond) {\n    this._actionModel.condition = cond;\n    return this.setQualifier(cond);\n  }\n\n  static fromJson(actionModel) {\n    const {\n      actionType,\n      condition\n    } = actionModel; // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n    // This allows the inheriting classes to determine the class to be created\n\n    const result = new this();\n    condition && result.condition(condition);\n    return result;\n  }\n\n}\n\nexport { SimulateColorBlindEffectAction };","map":null,"metadata":{},"sourceType":"module"}