{"ast":null,"code":"import { isUrl } from \"./urlUtils/isUrl.js\";\nimport { isFileName } from \"./urlUtils/isFileName.js\";\nimport { publicIDContainsVersion } from \"./urlUtils/publicIDContainsVersion.js\";\n/**\n * Create the URL prefix for Cloudinary resources.\n * Available use cases\n * http://res.cloudinary.com/{cloudName}\n * https://res.cloudinary.com/{cloudName}\n * https://{cloudName}-res.cloudinary.com/\n * http://{domain}/${cloudName}\n * https://{domain}/${cloudName}\n * https://{domain}\n * @private\n *\n * @param {string} cloudName\n * @param {IURLConfig} urlConfig\n */\n\nfunction getUrlPrefix(cloudName, urlConfig) {\n  const secure = urlConfig.secure;\n  const privateCDN = urlConfig.privateCdn;\n  const cname = urlConfig.cname;\n  const secureDistribution = urlConfig.secureDistribution;\n\n  if (!secure && !cname) {\n    return `http://res.cloudinary.com/${cloudName}`;\n  }\n\n  if (secure && !secureDistribution && privateCDN) {\n    return `https://${cloudName}-res.cloudinary.com`;\n  }\n\n  if (secure && !secureDistribution) {\n    return `https://res.cloudinary.com/${cloudName}`;\n  }\n\n  if (secure && secureDistribution && privateCDN) {\n    return `https://${secureDistribution}`;\n  }\n\n  if (secure && secureDistribution) {\n    return `https://${secureDistribution}/${cloudName}`;\n  }\n\n  if (!secure && cname) {\n    return `http://${cname}/${cloudName}`;\n  } else {\n    return 'ERROR';\n  }\n}\n/**\n * @private\n * @param assetType\n */\n\n\nfunction handleAssetType(assetType) {\n  //default to image\n  if (!assetType) {\n    return 'image';\n  }\n\n  return assetType;\n}\n/**\n * @private\n * @param deliveryType\n */\n\n\nfunction handleDeliveryType(deliveryType) {\n  //default to upload\n  if (!deliveryType) {\n    return 'upload';\n  }\n\n  return deliveryType;\n}\n/**\n *\n * @param {string} publicID\n * @param {number} version\n * @param {boolean} forceVersion\n */\n\n\nfunction getUrlVersion(publicID, version, forceVersion) {\n  const shouldForceVersion = forceVersion !== false;\n\n  if (version) {\n    return `v${version}`;\n  } // In all these conditions we never force a version\n\n\n  if (publicIDContainsVersion(publicID) || isUrl(publicID) || isFileName(publicID)) {\n    return '';\n  }\n\n  return shouldForceVersion ? 'v1' : '';\n}\n\nexport { handleAssetType, getUrlVersion, handleDeliveryType, getUrlPrefix };","map":null,"metadata":{},"sourceType":"module"}