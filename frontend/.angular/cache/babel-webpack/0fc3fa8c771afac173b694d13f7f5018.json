{"ast":null,"code":"import { pixelsToSeconds } from \"../../utils/conversions\";\nexport default class {\n  constructor(track) {\n    this.track = track;\n    this.active = false;\n  }\n\n  setup(samplesPerPixel, sampleRate) {\n    this.samplesPerPixel = samplesPerPixel;\n    this.sampleRate = sampleRate;\n  }\n\n  emitShift(x) {\n    const deltaX = x - this.prevX;\n    const deltaTime = pixelsToSeconds(deltaX, this.samplesPerPixel, this.sampleRate);\n    this.prevX = x;\n    this.track.ee.emit(\"shift\", deltaTime, this.track);\n  }\n\n  complete(x) {\n    this.emitShift(x);\n    this.active = false;\n  }\n\n  mousedown(e) {\n    e.preventDefault();\n    this.active = true;\n    this.el = e.target;\n    this.prevX = e.offsetX;\n  }\n\n  mousemove(e) {\n    if (this.active) {\n      e.preventDefault();\n      this.emitShift(e.offsetX);\n    }\n  }\n\n  mouseup(e) {\n    if (this.active) {\n      e.preventDefault();\n      this.complete(e.offsetX);\n    }\n  }\n\n  mouseleave(e) {\n    if (this.active) {\n      e.preventDefault();\n      this.complete(e.offsetX);\n    }\n  }\n\n  static getClass() {\n    return \".state-shift\";\n  }\n\n  static getEvents() {\n    return [\"mousedown\", \"mousemove\", \"mouseup\", \"mouseleave\"];\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}