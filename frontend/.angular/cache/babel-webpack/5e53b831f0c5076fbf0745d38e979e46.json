{"ast":null,"code":"import EventEmitter from \"event-emitter\";\nexport const STATE_UNINITIALIZED = 0;\nexport const STATE_LOADING = 1;\nexport const STATE_DECODING = 2;\nexport const STATE_FINISHED = 3;\nexport default class {\n  constructor(src, audioContext, ee = EventEmitter()) {\n    this.src = src;\n    this.ac = audioContext;\n    this.audioRequestState = STATE_UNINITIALIZED;\n    this.ee = ee;\n  }\n\n  setStateChange(state) {\n    this.audioRequestState = state;\n    this.ee.emit(\"audiorequeststatechange\", this.audioRequestState, this.src);\n  }\n\n  fileProgress(e) {\n    let percentComplete = 0;\n\n    if (this.audioRequestState === STATE_UNINITIALIZED) {\n      this.setStateChange(STATE_LOADING);\n    }\n\n    if (e.lengthComputable) {\n      percentComplete = e.loaded / e.total * 100;\n    }\n\n    this.ee.emit(\"loadprogress\", percentComplete, this.src);\n  }\n\n  fileLoad(e) {\n    const audioData = e.target.response || e.target.result;\n    this.setStateChange(STATE_DECODING);\n    return new Promise((resolve, reject) => {\n      this.ac.decodeAudioData(audioData, audioBuffer => {\n        this.audioBuffer = audioBuffer;\n        this.setStateChange(STATE_FINISHED);\n        resolve(audioBuffer);\n      }, err => {\n        if (err === null) {\n          // Safari issues with null error\n          reject(Error(\"MediaDecodeAudioDataUnknownContentType\"));\n        } else {\n          reject(err);\n        }\n      });\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}