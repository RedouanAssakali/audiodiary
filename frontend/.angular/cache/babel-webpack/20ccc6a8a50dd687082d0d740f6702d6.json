{"ast":null,"code":"import { VideoSource } from \"./source/sourceTypes/VideoSource.js\";\nimport { ImageSource } from \"./source/sourceTypes/ImageSource.js\";\nimport { SubtitlesSource } from \"./source/sourceTypes/SubtitlesSource.js\";\nimport { FetchSource } from \"./source/sourceTypes/FetchSource.js\";\nimport { TextSource } from \"./source/sourceTypes/TextSource.js\";\n/**\n * @description This namespace contains different sources that can be used in overlays and underlays\n * @memberOf Qualifiers\n * @namespace Source\n * @see {@link Actions.Overlay| The overlay action}\n * @see {@link Actions.Underlay| The underlay action}\n */\n\n/**\n * @summary qualifier\n * @description Returns an instance of an ImageSource\n * @memberOf Qualifiers.Source\n * @param {string} publicID The publicID of the image to be used as a layer\n * @return {Qualifiers.Source.ImageSource}\n */\n\nfunction image(publicID) {\n  return new ImageSource(publicID);\n}\n/**\n * @summary qualifier\n * @description Returns an instance of a TextSource\n * @memberOf Qualifiers.Source\n * @param {string} text The text to display.\n * @param {TextStyle | string} textStyle The textStyle to use with the text in the layer\n * @return {Qualifiers.Source.TextSource}\n */\n\n\nfunction text(text, textStyle) {\n  return new TextSource(text, textStyle);\n}\n/**\n * @summary qualifier\n * @description Returns an instance of a VideoSource\n * @memberOf Qualifiers.Source\n * @param {string} publicID The publicID of the video to be used as a layer\n * @return {Qualifiers.Source.VideoSource}\n */\n\n\nfunction video(publicID) {\n  return new VideoSource(publicID);\n}\n/**\n * @summary qualifier\n * @description Returns an instance of an VideoSource\n * @memberOf Qualifiers.Source\n * @param {string} fileName The publicID of the video to be used as a layer\n * @return {Qualifiers.Source.VideoSource}\n */\n\n\nfunction subtitles(fileName) {\n  return new SubtitlesSource(fileName);\n}\n/**\n * @summary qualifier\n * @description Returns an instance of a FetchSource\n * @memberOf Qualifiers.Source\n * @param {string} remoteURL The URL of the remote asset to fetch as a layer\n * @return {Qualifiers.Source.FetchSource}\n */\n\n\nfunction fetch(remoteURL) {\n  return new FetchSource(remoteURL);\n}\n\nconst Source = {\n  image,\n  text,\n  video,\n  subtitles,\n  fetch\n};\nexport { Source, image, text, video, subtitles, fetch };","map":null,"metadata":{},"sourceType":"module"}