{"ast":null,"code":"import _asyncToGenerator from \"/Users/hannatoenbreker/IdeaProjects/ad-vmc-1/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { map, share } from \"rxjs/operators\";\nimport { environment } from \"../../environments/environment.staging\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\"; // @ts-ignore\n\nexport let PostsService = /*#__PURE__*/(() => {\n  class PostsService {\n    constructor(http) {\n      this.http = http;\n      this.result = \"noting\";\n      this.restGetPosts();\n    }\n\n    restGetPosts() {\n      return this.http.get(`${environment.apiUrl}/posts`).pipe(map(postCards => {\n        const posts = [];\n\n        for (const post of postCards) {\n          posts.push(post);\n        }\n\n        this.posts = posts;\n        return posts;\n      }));\n    }\n\n    getAllThemes() {\n      return this.http.get(`${environment.apiUrl}/posts`).pipe(map(postCards => {\n        const themes = [];\n\n        for (const post of postCards) {\n          themes.push(post.theme);\n        }\n\n        return themes;\n      }));\n    } // TODO: fix to load in data before function fires\n\n\n    getTopFiveThemes() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        // await this.http.get<Post[]>(`${environment.apiUrl}/posts`).pipe(\n        //    map( (postCards: any[]) => {\n        //     const themes: String[] = [];\n        //     for (const post of postCards) {\n        //       themes.push(post.theme);\n        //     }\n        let strArray = yield _this.getAllThemes();\n        return new Promise(resolve => strArray.pipe().subscribe(data => {\n          var count = {};\n          data.forEach(function (i) {\n            count[i] = (count[i] || 0) + 1;\n          });\n          var result = Object.entries(count);\n          result.sort((a, b) => {\n            return b[1] - a[1];\n          });\n          _this.result = result.slice(0, 5);\n          resolve(_this.result);\n        })); // console.log(this.result);\n        // return this.result;\n        // var count = {};\n        // strArray.forEach(function (i) { // @ts-ignore\n        //   count[i] = (count[i] || 0) + 1;\n        // });\n        // @ts-ignore\n        // var result = Object.entries(count);\n        //let findDuplicates = (arr: any[]) => arr.filter((item, index) => arr.indexOf(item) != index)\n        //let set = new Set(findDuplicates(strArray));\n        //let array = Array.from(set);\n        // result.sort((a: any, b: any) => {\n        //   return b[1] - a[1];\n        // });\n        // this.result = result.slice(0, 5);\n        // this.themesList = themes;\n        // console.log(\"themes loaded\" + themes);\n        // return themes;\n        //  }));\n        //console.log(\"result\" + this.result);\n        //return this.result;\n        // let strArray = [ \"q\", \"q\", \"w\", \"w\", \"w\", \"e\", \"i\", \"u\", \"r\", \"u\", \"u\", \"u\"];\n        // let strArray = this.themesList;\n        // console.log(\"themes\" + this.themesList);\n        // var count = {};\n        // strArray.forEach(function (i) { // @ts-ignore\n        //   count[i] = (count[i] || 0) + 1;\n        // });\n        //\n        // // @ts-ignore\n        // var result = Object.entries(count);\n        // //let findDuplicates = (arr: any[]) => arr.filter((item, index) => arr.indexOf(item) != index)\n        // //let set = new Set(findDuplicates(strArray));\n        // //let array = Array.from(set);\n        // result.sort((a: any, b: any) => {\n        //   return b[1] - a[1];\n        // });\n        // return result.slice(0, 5);\n      })();\n    }\n\n    getPostsByTheme(theme) {\n      return this.http.get(`${environment.apiUrl}/posts`).pipe(map(postCards => {\n        const posts = [];\n\n        for (const post of postCards) {\n          if (post.theme == theme) {\n            posts.push(post);\n          }\n        }\n\n        this.posts = posts;\n        return posts;\n      }));\n    }\n\n    getReportedPosts() {\n      return this.http.get(`${environment.apiUrl}/posts`).pipe(map(postCards => {\n        const posts = [];\n\n        for (const post of postCards) {\n          if (post.amountReport > 0) {\n            posts.push(post);\n          }\n        }\n\n        return posts.sort((a, b) => {\n          return b.amountReport - a.amountReport;\n        });\n      }));\n    }\n\n    restGetPost(postId) {\n      return this.http.get(`${environment.apiUrl}/posts/${postId}`);\n    }\n\n    restGetPostsOfUser(email) {\n      return this.http.get(`${environment.apiUrl}/users/${email}/posts`).pipe(map(postList => {\n        const posts = [];\n\n        for (const post of postList) {\n          posts.push(post);\n        }\n\n        return posts;\n      }));\n    }\n\n    restPostPost(postId) {\n      const url = `${environment.apiUrl}/posts/${postId}`;\n      return this.http.post(url, postId); // restPostPost(postId: number):Observable<Post[]> {\n      //   const url = `http://localhost:8084/posts/${postId}`;\n      //   return this.http.post<Post>(url, postId);\n    }\n\n    restCreateNewPost(post) {\n      const observable = this.http.post(`${environment.apiUrl}/posts`, {\n        id: post.id,\n        user: post.user,\n        title: post.title,\n        description: post.description,\n        img: post.img,\n        theme: post.theme,\n        isLiked: false,\n        amountReport: 0,\n        lng: post.lng,\n        lat: post.lat,\n        location: post.location,\n        audio: post.audio\n      }).pipe(share());\n      observable.subscribe(data => {\n        console.log(data);\n      }, err => {\n        console.log('creation error', err);\n      });\n      return observable;\n    }\n\n    restPutPost(post) {\n      console.log(post);\n      const url = `${environment.apiUrl}/posts/${post.id}`;\n      return this.http.put(url, post);\n    }\n\n    restDeletePosts(postId) {\n      const url = `${environment.apiUrl}/posts/${postId}`;\n      return this.http.delete(url);\n    }\n\n  }\n\n  PostsService.ɵfac = function PostsService_Factory(t) {\n    return new (t || PostsService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  PostsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PostsService,\n    factory: PostsService.ɵfac,\n    providedIn: 'root'\n  });\n  return PostsService;\n})();","map":null,"metadata":{},"sourceType":"module"}