{"ast":null,"code":"import { Qualifier } from \"../../../internal/qualifier/Qualifier.js\";\nimport { Action } from \"../../../internal/Action.js\";\nimport { custom, faces } from \"../../../qualifiers/region.js\";\n/**\n * @description The Action class of the blur Builder.\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\n\nclass BlurAction extends Action {\n  constructor(strength) {\n    super();\n    this._actionModel = {};\n    this._strength = strength;\n    this._actionModel.actionType = 'blur';\n    this._actionModel.strength = strength;\n  }\n  /**\n   * @description Specifies the region to blur.\n   * @param {NamedRegion} blurRegion\n   */\n\n\n  region(blurRegion) {\n    this._actionModel.region = {\n      RegionType: blurRegion.regionType\n    };\n    this._region = blurRegion;\n    return this;\n  }\n  /**\n   * @description Sets the strength of the blur effect.\n   * @param {number | string} strength\n   */\n\n\n  strength(strength) {\n    this._strength = strength;\n    this._actionModel.strength = strength;\n    return this;\n  }\n\n  prepareQualifiers() {\n    /*\n     * Blur with region is a unique object in this codebase.\n     * On top of Blur being an Action with Qualifiers,\n     * it also accepts a Qualifier called Region.\n     *\n     * This Qualifier is in itself composite of qualifiers (such as height, or width).\n     * The existence of Region changes the output of Blur in non traditional ways\n     * which forced this relatively ad-hoc implementation.\n     *\n     * Aside from all of that, all of the Qualifiers in the component should be alphabetized\n     * This happens naturally in the Action class,\n     * however since we're dealing with two levels of qualifiers (Blur and Region),\n     * these need to be merged.\n     *\n     * This function will merge the Region qualifiers with Blur\n     * and add all needed implicit qualifiers (like g_ocr_text).\n     * We're not using the full Gravity Qualifier here to prevent the code import for such a simplistic case\n     */\n    const str = this._strength ? `:${this._strength}` : '';\n\n    if ('_region' in this) {\n      const qualifiers = this._region.qualifiers; // Copy qualifiers from the region \"action\" to the blur action\n\n      qualifiers.forEach(q => this.addQualifier(q));\n\n      if (this._region.regionType === 'named') {\n        this.addQualifier(new Qualifier('e', `blur_region${str}`));\n      }\n\n      if (this._region.regionType === 'ocr_text') {\n        this.addQualifier(new Qualifier('e', `blur_region${str}`));\n        this.addQualifier(new Qualifier('g', `ocr_text`));\n      }\n\n      if (this._region.regionType === 'faces') {\n        this.addQualifier(new Qualifier('e', `blur_faces${str}`));\n      }\n    } else {\n      this.addQualifier(new Qualifier('e', `blur${str}`));\n    }\n  }\n\n  static fromJson(actionModel) {\n    const {\n      actionType,\n      strength,\n      region\n    } = actionModel; // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n    // This allows the inheriting classes to determine the class to be created\n\n    const result = new this(strength);\n    strength && result.strength(strength);\n\n    if (region && region.RegionType === 'faces') {\n      result.region(faces());\n    }\n\n    if (region && region.RegionType === 'custom') {\n      result.region(custom());\n    }\n\n    return result;\n  }\n\n}\n\nexport { BlurAction };","map":null,"metadata":{},"sourceType":"module"}