{"ast":null,"code":"import { BaseSource } from \"../BaseSource.js\";\nimport { serializeCloudinaryCharacters } from \"../../../internal/utils/serializeCloudinaryCharacters.js\";\nimport { Action } from \"../../../internal/Action.js\";\nimport { Qualifier } from \"../../../internal/qualifier/Qualifier.js\";\nimport { prepareColor } from \"../../../internal/utils/prepareColor.js\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.BaseSource}\n * @description Defines the common interface for all text-based sources\n */\n\nclass BaseTextSource extends BaseSource {\n  constructor(text, textStyle) {\n    super();\n    this.type = 'text';\n    this.text = text;\n    this._textStyle = textStyle;\n  }\n\n  encodeText(text) {\n    return serializeCloudinaryCharacters(text);\n  }\n\n  textColor(color) {\n    this._textColor = color;\n    return this;\n  }\n\n  backgroundColor(bgColor) {\n    this._backgroundColor = bgColor;\n    return this;\n  }\n  /**\n   * @description\n   * Returns the opening string of the layer,\n   * This method is used internally within {@link SDK.LayerAction|LayerAction}\n   * @returns {string}\n   */\n\n\n  getOpenSourceString(layerType) {\n    const layerParam = [this.type, this._textStyle && this._textStyle.toString(), this.encodeText(this.text)].filter(a => a).join(':');\n    const tmpAction = new Action();\n    tmpAction.addQualifier(new Qualifier(layerType, layerParam));\n    this._textColor && tmpAction.addQualifier(new Qualifier('co', prepareColor(this._textColor)));\n    this._backgroundColor && tmpAction.addQualifier(new Qualifier('b', prepareColor(this._backgroundColor)));\n    return tmpAction.toString();\n  }\n\n}\n\nexport { BaseTextSource };","map":null,"metadata":{},"sourceType":"module"}