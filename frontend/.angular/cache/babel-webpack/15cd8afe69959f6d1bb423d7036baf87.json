{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@angular/router\";\nexport let AuthInterceptorService = /*#__PURE__*/(() => {\n  class AuthInterceptorService {\n    constructor(authService, router) {\n      this.authService = authService;\n      this.router = router;\n    }\n\n    intercept(req, next) {\n      // do not intercept authentication attempts\n      if (req.url.endsWith('rest/auth')) {\n        return next.handle(req);\n      } else {\n        // add the token header if available\n        if (this.authService.currentToken) {\n          req = this.addToken(req, this.authService.currentToken);\n        } // proceed with the request, trying to refresh the token for unauthorised requests\n\n\n        return next.handle(req).pipe( // handle potential errors\n        catchError(error => {\n          // if the response code is 401 (unauthorised)\n          if (error && error.status === 401) {\n            // force authentication if it was a failed attempt to refresh the token\n            if (req.url.endsWith('rest/refresh-token')) {\n              this.forceLogoff();\n              return throwError(error);\n            } else {\n              /* try to refresh the token for all other attempts */\n              return this.authService.refreshToken().pipe(switchMap(data => {\n                // getting the returned token\n                const token = data['headers'].get('Authorization'); // trying again with the returned token\n\n                return next.handle(this.addToken(req, data['headers'].get('Authorization')));\n              }));\n            }\n          } else {\n            return throwError(error);\n          }\n        })\n        /* catchError */\n        );\n        /* pipe */\n      }\n    }\n\n    forceLogoff() {\n      this.authService.logout();\n      this.router.navigate(['login'], {\n        queryParams: {\n          msg: 'session expired'\n        }\n      });\n    }\n    /**\n     * Add the token header to the request. Since HttpRequests are immutable a clone is created\n     * @param request\n     * @param token\n     * @private\n     */\n\n\n    addToken(request, token) {\n      return request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n\n  }\n\n  AuthInterceptorService.ɵfac = function AuthInterceptorService_Factory(t) {\n    return new (t || AuthInterceptorService)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptorService,\n    factory: AuthInterceptorService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthInterceptorService;\n})();","map":null,"metadata":{},"sourceType":"module"}