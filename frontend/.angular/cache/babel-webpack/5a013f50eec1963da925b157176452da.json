{"ast":null,"code":"/**\n * Represents a transformation expression.\n * @param {string} expressionStr - An expression in string format.\n * @class Expression\n *\n */\nclass Expression {\n  constructor(expressionStr) {\n    /**\n     * @protected\n     * @inner Expression-expressions\n     */\n    this.expressions = [];\n\n    if (expressionStr != null) {\n      this.expressions.push(Expression.normalize(expressionStr));\n    }\n  }\n  /**\n   * Convenience constructor method\n   * @function Expression.new\n   */\n\n\n  static new(expressionStr) {\n    return new this(expressionStr);\n  }\n  /**\n   * Normalize a string expression\n   * @function Cloudinary#normalize\n   * @param {string} expression a expression, e.g. \"w gt 100\", \"width_gt_100\", \"width > 100\"\n   * @return {string} the normalized form of the value expression, e.g. \"w_gt_100\"\n   */\n\n\n  static normalize(expression) {\n    var operators, operatorsPattern, operatorsReplaceRE, predefinedVarsPattern, predefinedVarsReplaceRE;\n\n    if (expression == null) {\n      return expression;\n    }\n\n    expression = String(expression);\n    operators = \"\\\\|\\\\||>=|<=|&&|!=|>|=|<|/|-|\\\\+|\\\\*|\\\\^\"; // operators\n\n    operatorsPattern = \"((\" + operators + \")(?=[ _]))\";\n    operatorsReplaceRE = new RegExp(operatorsPattern, \"g\"); // @ts-ignore\n\n    expression = expression.replace(operatorsReplaceRE, match => OPERATORS[match]); // predefined variables\n\n    predefinedVarsPattern = \"(\" + Object.keys(PREDEFINED_VARS).join(\"|\") + \")\";\n    predefinedVarsReplaceRE = new RegExp(predefinedVarsPattern, \"g\"); // @ts-ignore\n\n    expression = expression.replace(predefinedVarsReplaceRE, (match, p1, offset) => expression[offset - 1] === '$' ? match : PREDEFINED_VARS[match]);\n    return expression.replace(/[ _]+/g, '_');\n  }\n  /**\n   * Serialize the expression\n   * @return {string} the expression as a string\n   */\n\n\n  serialize() {\n    return Expression.normalize(this.expressions.join(\"_\"));\n  }\n\n  toString() {\n    return this.serialize();\n  }\n  /**\n   * Get the parent transformation of this expression\n   * @return Transformation\n   */\n\n\n  getParent() {\n    return this.parent;\n  }\n  /**\n   * Set the parent transformation of this expression\n   * @param {Transformation} the parent transformation\n   * @return {Expression} this expression\n   */\n\n\n  setParent(parent) {\n    this.parent = parent;\n    return this;\n  }\n  /**\n   * Add a expression\n   * @function Expression#predicate\n   * @internal\n   */\n\n\n  predicate(name, operator, value) {\n    // @ts-ignore\n    if (OPERATORS[operator] != null) {\n      // @ts-ignore\n      operator = OPERATORS[operator];\n    }\n\n    this.expressions.push(`${name}_${operator}_${value}`);\n    return this;\n  }\n  /**\n   * @function Expression#and\n   */\n\n\n  and() {\n    this.expressions.push(\"and\");\n    return this;\n  }\n  /**\n   * @function Expression#or\n   */\n\n\n  or() {\n    this.expressions.push(\"or\");\n    return this;\n  }\n  /**\n   * Conclude expression\n   * @function Expression#then\n   * @return {Transformation} the transformation this expression is defined for\n   */\n\n\n  then() {\n    return this.getParent().if(this.toString());\n  }\n  /**\n   * @function Expression#height\n   * @param {string} operator the comparison operator (e.g. \"<\", \"lt\")\n   * @param {string|number} value the right hand side value\n   * @return {Expression} this expression\n   */\n\n\n  height(operator, value) {\n    return this.predicate(\"h\", operator, value);\n  }\n  /**\n   * @function Expression#width\n   * @param {string} operator the comparison operator (e.g. \"<\", \"lt\")\n   * @param {string|number} value the right hand side value\n   * @return {Expression} this expression\n   */\n\n\n  width(operator, value) {\n    return this.predicate(\"w\", operator, value);\n  }\n  /**\n   * @function Expression#aspectRatio\n   * @param {string} operator the comparison operator (e.g. \"<\", \"lt\")\n   * @param {string|number} value the right hand side value\n   * @return {Expression} this expression\n   */\n\n\n  aspectRatio(operator, value) {\n    return this.predicate(\"ar\", operator, value);\n  }\n  /**\n   * @function Expression#pages\n   * @param {string} operator the comparison operator (e.g. \"<\", \"lt\")\n   * @param {string|number} value the right hand side value\n   * @return {Expression} this expression\n   */\n\n\n  pageCount(operator, value) {\n    return this.predicate(\"pc\", operator, value);\n  }\n  /**\n   * @function Expression#faces\n   * @param {string} operator the comparison operator (e.g. \"<\", \"lt\")\n   * @param {string|number} value the right hand side value\n   * @return {Expression} this expression\n   */\n\n\n  faceCount(operator, value) {\n    return this.predicate(\"fc\", operator, value);\n  }\n\n  value(value) {\n    this.expressions.push(value);\n    return this;\n  }\n  /**\n   */\n\n\n  static variable(name, value) {\n    return new this(name).value(value);\n  }\n  /**\n   * @returns Expression a new expression with the predefined variable \"width\"\n   * @function Expression.width\n   */\n\n\n  static width() {\n    return new this(\"width\");\n  }\n  /**\n   * @returns Expression a new expression with the predefined variable \"height\"\n   * @function Expression.height\n   */\n\n\n  static height() {\n    return new this(\"height\");\n  }\n  /**\n   * @returns Expression a new expression with the predefined variable \"initialWidth\"\n   * @function Expression.initialWidth\n   */\n\n\n  static initialWidth() {\n    return new this(\"initialWidth\");\n  }\n  /**\n   * @returns Expression a new expression with the predefined variable \"initialHeight\"\n   * @function Expression.initialHeight\n   */\n\n\n  static initialHeight() {\n    return new this(\"initialHeight\");\n  }\n  /**\n   * @returns Expression a new expression with the predefined variable \"aspectRatio\"\n   * @function Expression.aspectRatio\n   */\n\n\n  static aspectRatio() {\n    return new this(\"aspectRatio\");\n  }\n  /**\n   * @returns Expression a new expression with the predefined variable \"initialAspectRatio\"\n   * @function Expression.initialAspectRatio\n   */\n\n\n  static initialAspectRatio() {\n    return new this(\"initialAspectRatio\");\n  }\n  /**\n   * @returns Expression a new expression with the predefined variable \"pageCount\"\n   * @function Expression.pageCount\n   */\n\n\n  static pageCount() {\n    return new this(\"pageCount\");\n  }\n  /**\n   * @returns Expression new expression with the predefined variable \"faceCount\"\n   * @function Expression.faceCount\n   */\n\n\n  static faceCount() {\n    return new this(\"faceCount\");\n  }\n  /**\n   * @returns Expression a new expression with the predefined variable \"currentPage\"\n   * @function Expression.currentPage\n   */\n\n\n  static currentPage() {\n    return new this(\"currentPage\");\n  }\n  /**\n   * @returns Expression a new expression with the predefined variable \"tags\"\n   * @function Expression.tags\n   */\n\n\n  static tags() {\n    return new this(\"tags\");\n  }\n  /**\n   * @returns Expression a new expression with the predefined variable \"pageX\"\n   * @function Expression.pageX\n   */\n\n\n  static pageX() {\n    return new this(\"pageX\");\n  }\n  /**\n   * @returns Expression a new expression with the predefined variable \"pageY\"\n   * @function Expression.pageY\n   */\n\n\n  static pageY() {\n    return new this(\"pageY\");\n  }\n\n}\n/**\n * @internal\n */\n\n\nconst OPERATORS = {\n  \"=\": 'eq',\n  \"!=\": 'ne',\n  \"<\": 'lt',\n  \">\": 'gt',\n  \"<=\": 'lte',\n  \">=\": 'gte',\n  \"&&\": 'and',\n  \"||\": 'or',\n  \"*\": \"mul\",\n  \"/\": \"div\",\n  \"+\": \"add\",\n  \"-\": \"sub\",\n  \"^\": \"pow\"\n};\n/**\n * @internal\n */\n\nconst PREDEFINED_VARS = {\n  \"aspect_ratio\": \"ar\",\n  \"aspectRatio\": \"ar\",\n  \"current_page\": \"cp\",\n  \"currentPage\": \"cp\",\n  \"preview:duration\": \"preview:duration\",\n  \"duration\": \"du\",\n  \"face_count\": \"fc\",\n  \"faceCount\": \"fc\",\n  \"height\": \"h\",\n  \"initial_aspect_ratio\": \"iar\",\n  \"initial_duration\": \"idu\",\n  \"initial_height\": \"ih\",\n  \"initial_width\": \"iw\",\n  \"initialAspectRatio\": \"iar\",\n  \"initialDuration\": \"idu\",\n  \"initialHeight\": \"ih\",\n  \"initialWidth\": \"iw\",\n  \"page_count\": \"pc\",\n  \"page_x\": \"px\",\n  \"page_y\": \"py\",\n  \"pageCount\": \"pc\",\n  \"pageX\": \"px\",\n  \"pageY\": \"py\",\n  \"tags\": \"tags\",\n  \"width\": \"w\"\n};\n/**\n * @internal\n */\n\nconst BOUNDRY = \"[ _]+\";\nexport default Expression;","map":null,"metadata":{},"sourceType":"module"}