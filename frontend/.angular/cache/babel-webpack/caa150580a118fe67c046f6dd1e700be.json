{"ast":null,"code":"import { generateTransformationString } from \"./generateTransformationString.js\";\nimport { finalize_resource_type } from \"./utils/finalizeResourceType.js\";\nimport { finalize_source } from \"./utils/finalize_source.js\";\nimport { unsigned_url_prefix } from \"./utils/unsigned_url_prefix.js\";\nimport { cloneDeep } from '../internal/utils/cloneDeep.js';\nexport function createCloudinaryLegacyURL(public_id, transformationOptions) {\n  // Path format\n  if (transformationOptions.type === \"fetch\") {\n    if (transformationOptions.fetch_format == null) {\n      transformationOptions.fetch_format = transformationOptions.format;\n    }\n  }\n\n  let source_to_sign;\n  let type = transformationOptions.type;\n  let resource_type = transformationOptions.resource_type || 'image';\n  let version = transformationOptions.version;\n  const force_version = typeof transformationOptions.force_version === 'boolean' ? transformationOptions.force_version : true;\n  const long_url_signature = !!transformationOptions.long_url_signature;\n  const format = transformationOptions.format;\n  const cloud_name = transformationOptions.cloud_name;\n\n  if (!cloud_name) {\n    throw \"cloud_name must be provided in the configuration\";\n  }\n\n  const private_cdn = transformationOptions.private_cdn;\n  const secure_distribution = transformationOptions.secure_distribution;\n  const secure = transformationOptions.secure;\n  const cdn_subdomain = transformationOptions.cdn_subdomain;\n  const secure_cdn_subdomain = transformationOptions.secure_cdn_subdomain;\n  const cname = transformationOptions.cname;\n  const shorten = transformationOptions.shorten;\n  const sign_url = transformationOptions.sign_url;\n  const api_secret = transformationOptions.api_secret;\n  const url_suffix = transformationOptions.url_suffix;\n  const use_root_path = transformationOptions.use_root_path;\n  const auth_token = transformationOptions.auth_token;\n  const preloaded = /^(image|raw)\\/([a-z0-9_]+)\\/v(\\d+)\\/([^#]+)$/.exec(public_id);\n\n  if (preloaded) {\n    resource_type = preloaded[1];\n    type = preloaded[2];\n    version = preloaded[3];\n    public_id = preloaded[4];\n  }\n\n  const original_source = public_id;\n\n  if (public_id == null) {\n    return original_source;\n  }\n\n  public_id = public_id.toString();\n\n  if (type === null && public_id.match(/^https?:\\//i)) {\n    return original_source;\n  }\n\n  [resource_type, type] = finalize_resource_type(resource_type, type, url_suffix, use_root_path, shorten);\n  [public_id, source_to_sign] = finalize_source(public_id, format, url_suffix);\n\n  if (version == null && force_version && source_to_sign.indexOf(\"/\") >= 0 && !source_to_sign.match(/^v[0-9]+/) && !source_to_sign.match(/^https?:\\//)) {\n    version = 1;\n  }\n\n  if (version != null) {\n    version = `v${version}`;\n  } else {\n    version = null;\n  }\n\n  const transformation = generateTransformationString(cloneDeep(transformationOptions)).replace(/([^:])\\/\\//g, '$1/');\n  ;\n\n  if (sign_url && !auth_token) {\n    let to_sign = [transformation, source_to_sign].filter(function (part) {\n      return part != null && part !== '';\n    }).join('/');\n\n    try {\n      for (let i = 0; to_sign !== decodeURIComponent(to_sign) && i < 10; i++) {\n        to_sign = decodeURIComponent(to_sign);\n      } // eslint-disable-next-line no-empty\n\n    } catch (error) {} // No support for Auth Token\n    // const shasum = crypto.createHash(long_url_signature ? 'sha256' : 'sha1');\n    // shasum.update(utf8_encode(to_sign + api_secret), 'binary');\n    // signature = shasum.digest('base64').replace(/\\//g, '_').replace(/\\+/g, '-').substring(0, long_url_signature ? 32 : 8);\n    // signature = `s--${signature}--`;\n\n  }\n\n  const prefix = unsigned_url_prefix(public_id, cloud_name, private_cdn, cdn_subdomain, secure_cdn_subdomain, cname, secure, secure_distribution);\n  const resultUrl = [prefix, resource_type, type, transformation, version, public_id].filter(function (part) {\n    return part != null && part !== '';\n  }).join('/').replace(' ', '%20');\n  return resultUrl;\n}","map":null,"metadata":{},"sourceType":"module"}