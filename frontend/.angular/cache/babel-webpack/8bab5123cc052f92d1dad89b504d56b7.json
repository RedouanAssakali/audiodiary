{"ast":null,"code":"import { base64Map } from \"./base64Map.js\";\nimport { stringPad } from \"./stringPad.js\";\nimport { reverseVersion } from \"./reverseVersion.js\";\n/**\n * @private\n * @description Encodes a semVer-like version string\n * @param {string} semVer Input can be either x.y.z or x.y\n * @return {string} A string built from 3 characters of the base64 table that encode the semVer\n */\n\nexport function encodeVersion(semVer) {\n  let strResult = ''; // support x.y or x.y.z by using 'parts' as a variable\n\n  const parts = semVer.split('.').length;\n  const paddedStringLength = parts * 6; // we pad to either 12 or 18 characters\n  // reverse (but don't mirror) the version. 1.5.15 -> 15.5.1\n  // Pad to two spaces, 15.5.1 -> 15.05.01\n\n  const paddedReversedSemver = reverseVersion(semVer); // turn 15.05.01 to a string '150501' then to a number 150501\n\n  const num = parseInt(paddedReversedSemver.split('.').join('')); // Represent as binary, add left padding to 12 or 18 characters.\n  // 150,501 -> 100100101111100101\n\n  let paddedBinary = num.toString(2);\n  paddedBinary = stringPad(paddedBinary, paddedStringLength, '0'); // Stop in case an invalid version number was provided\n  // paddedBinary must be built from sections of 6 bits\n\n  if (paddedBinary.length % 6 !== 0) {\n    throw 'Version must be smaller than 43.21.26)';\n  } // turn every 6 bits into a character using the base64Map\n\n\n  paddedBinary.match(/.{1,6}/g).forEach(bitString => {\n    // console.log(bitString);\n    strResult += base64Map[bitString];\n  });\n  return strResult;\n}","map":null,"metadata":{},"sourceType":"module"}