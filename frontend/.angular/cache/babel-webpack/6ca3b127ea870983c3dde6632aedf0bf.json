{"ast":null,"code":"import { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { ResizeAdvancedAction } from \"./ResizeAdvancedAction.js\";\n/**\n * @description Defines how to crop an asset\n * @extends Actions.Resize.ResizeAdvancedAction\n * @memberOf Actions.Resize\n * @see Visit {@link Actions.Resize| Resize} for examples\n */\n\nclass ResizeCropAction extends ResizeAdvancedAction {\n  /**\n   * @description Horizontal position for custom-coordinates based cropping.\n   * @param {number} x The x position.\n   */\n  x(x) {\n    this._actionModel.x = x;\n    return this.addQualifier(new Qualifier('x', x));\n  }\n  /**\n   * @description Vertical position for custom-coordinates based cropping\n   * @param {number} y The y position.\n   */\n\n\n  y(y) {\n    this._actionModel.y = y;\n    return this.addQualifier(new Qualifier('y', y));\n  }\n  /**\n   * @description Controls how much of the original image surrounding the face to keep when using either the 'crop' or 'thumb' cropping modes with face detection.\n   * @param {number | string} z The zoom factor. (Default: 1.0)\n   */\n\n\n  zoom(z) {\n    this._actionModel.zoom = z;\n    return this.addQualifier(new Qualifier('z', z));\n  }\n\n  static fromJson(actionModel) {\n    const result = super.fromJson.apply(this, [actionModel]);\n    actionModel.x && result.x(actionModel.x);\n    actionModel.y && result.y(actionModel.y);\n    actionModel.zoom && result.zoom(actionModel.zoom);\n    return result;\n  }\n\n}\n\nexport { ResizeCropAction };","map":null,"metadata":{},"sourceType":"module"}