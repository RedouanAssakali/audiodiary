{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.linear = linear;\nexports.exponential = exponential;\nexports.sCurve = sCurve;\nexports.logarithmic = logarithmic;\n\nfunction linear(length, rotation) {\n  var curve = new Float32Array(length),\n      i,\n      x,\n      scale = length - 1;\n\n  for (i = 0; i < length; i++) {\n    x = i / scale;\n\n    if (rotation > 0) {\n      curve[i] = x;\n    } else {\n      curve[i] = 1 - x;\n    }\n  }\n\n  return curve;\n}\n\nfunction exponential(length, rotation) {\n  var curve = new Float32Array(length),\n      i,\n      x,\n      scale = length - 1,\n      index;\n\n  for (i = 0; i < length; i++) {\n    x = i / scale;\n    index = rotation > 0 ? i : length - 1 - i;\n    curve[index] = Math.exp(2 * x - 1) / Math.exp(1);\n  }\n\n  return curve;\n} //creating a curve to simulate an S-curve with setValueCurveAtTime.\n\n\nfunction sCurve(length, rotation) {\n  var curve = new Float32Array(length),\n      i,\n      phase = rotation > 0 ? Math.PI / 2 : -(Math.PI / 2);\n\n  for (i = 0; i < length; ++i) {\n    curve[i] = Math.sin(Math.PI * i / length - phase) / 2 + 0.5;\n  }\n\n  return curve;\n} //creating a curve to simulate a logarithmic curve with setValueCurveAtTime.\n\n\nfunction logarithmic(length, base, rotation) {\n  var curve = new Float32Array(length),\n      index,\n      x = 0,\n      i;\n\n  for (i = 0; i < length; i++) {\n    //index for the curve array.\n    index = rotation > 0 ? i : length - 1 - i;\n    x = i / length;\n    curve[index] = Math.log(1 + base * x) / Math.log(1 + base);\n  }\n\n  return curve;\n}","map":null,"metadata":{},"sourceType":"script"}