{"ast":null,"code":"import { LeveledEffectAction } from \"../EffectActions/LeveledEffectAction.js\";\nimport { Qualifier } from \"../../../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../../../internal/qualifier/QualifierValue.js\";\nimport { prepareColor } from \"../../../internal/utils/prepareColor.js\";\n/**\n * @description Makes the background of the image transparent (or solid white for formats that do not support transparency).\n * @extends LeveledEffectAction\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\n\nclass MakeTransparentEffectAction extends LeveledEffectAction {\n  constructor() {\n    super(...arguments);\n    this._actionModel = {\n      actionType: 'makeTransparent'\n    };\n  }\n  /**\n   * @description Sets the tolerance used to accommodate variance in the background color.\n   * @param {number | string} value The tolerance used to accommodate variance in the background color. (Range: 0 to 100, Server default: 10)\n   */\n\n\n  tolerance(value) {\n    this._actionModel.tolerance = value;\n    const qualifierEffect = this.createEffectQualifier(this.effectType, value);\n    this.addQualifier(qualifierEffect);\n    return this;\n  }\n  /**\n   * @description Sets the color to make transparent.\n   * @param {string} color The HTML name of the color (red, green, etc.) or RGB hex code.\n   * @return {this}\n   */\n\n\n  colorToReplace(color) {\n    this._actionModel.color = color;\n    return this.addQualifier(new Qualifier('co', new QualifierValue(prepareColor(color))));\n  }\n\n  static fromJson(actionModel) {\n    const {\n      actionType,\n      tolerance,\n      color\n    } = actionModel; // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n    // This allows the inheriting classes to determine the class to be created\n\n    const result = new this(actionType, tolerance);\n    tolerance && result.tolerance(tolerance);\n    color && result.colorToReplace(color);\n    return result;\n  }\n\n}\n\nexport { MakeTransparentEffectAction };","map":null,"metadata":{},"sourceType":"module"}