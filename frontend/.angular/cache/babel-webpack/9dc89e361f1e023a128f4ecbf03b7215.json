{"ast":null,"code":"import { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Action } from \"../../internal/Action.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\n/**\n * @description - This Action, while belonging to Effect, acts as a modified overlay.\n *                The class implements the Builder pattern, where strength() and preserveColor()\n *                are applied to the instance, and toString() is responsible to combining them into the right result.\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\n\nclass StyleTransfer extends Action {\n  /**\n   * The Image Source used to create the style transfer,\n   * Use the Image Source builder to quickly create a source:\n   * </br>Import: {@link Qualifiers.Source|import Sources from '@cloudinary/url-gen/qualifiers/sources';}\n   * </br>Create: `Source.image('dog')`\n   * @param {ImageSource} imageSource\n   */\n  constructor(imageSource) {\n    super();\n    this.imageSource = imageSource;\n  }\n  /**\n   * Determines the strength in which the styleTransfer is applied.\n   * @param {number} [effectStrength] - The strength level, 1-100, default: 100\n   * @return {this}\n   */\n\n\n  strength(effectStrength = null) {\n    this.effectStrength = effectStrength;\n    return this;\n  }\n  /**\n   * More aggressively preserves the colors of the the target photo,\n   * Can be used with `strength()` to enhance this behaviour\n   * @param {boolean} bool\n   * @return {this}\n   */\n\n\n  preserveColor(bool = true) {\n    this.preserve = bool;\n    return this;\n  }\n  /**\n   * The `build` phase of the Action, used internally to concat all the options received into a single string.\n   * The result of this method is the toString() of the imageLayer provided in the constructor.\n   * @return {string}\n   */\n\n\n  toString() {\n    const NAME = 'style_transfer';\n    const PRES = this.preserve ? 'preserve_color' : null;\n    const STRENGTH = this.effectStrength; // Create the style effect\n\n    const styleEffect = new Qualifier('e', new QualifierValue([NAME, PRES, STRENGTH])); // Handle the source for publicID,\n\n    const sourceOpenString = this.imageSource.getOpenSourceString('l'); // Handle source transformation\n\n    const imgTx = this.imageSource.getTransformation();\n    const sourceTransformation = imgTx ? imgTx.toString() : '';\n    return [sourceOpenString, sourceTransformation, `${styleEffect},fl_layer_apply`].filter(a => a).join('/');\n  }\n\n}\n\nexport { StyleTransfer };","map":null,"metadata":{},"sourceType":"module"}