{"ast":null,"code":"import { LEGACY_PREDEFINED_VARS, LEGACY_CONDITIONAL_OPERATORS } from \"../consts.js\";\n/**\n * Normalize an offset value\n * @param {String} expression a decimal value which may have a 'p' or '%' postfix. E.g. '35%', '0.4p'\n * @return {Object|String} a normalized String of the input value if possible otherwise the value itself\n */\n\nexport function legacyNormalizeExpression(expression) {\n  if (typeof expression !== 'string' || expression.length === 0 || expression.match(/^!.+!$/)) {\n    if (expression) {\n      return expression.toString();\n    } else {\n      return expression;\n    }\n  }\n\n  expression = String(expression);\n  const operators = \"\\\\|\\\\||>=|<=|&&|!=|>|=|<|/|-|\\\\+|\\\\*|\\\\^\"; // operators\n\n  const operatorsPattern = \"((\" + operators + \")(?=[ _]))\";\n  const operatorsReplaceRE = new RegExp(operatorsPattern, \"g\");\n  expression = expression.replace(operatorsReplaceRE, match => {\n    return LEGACY_CONDITIONAL_OPERATORS[match];\n  }); // predefined variables\n\n  const predefinedVarsPattern = \"(\" + Object.keys(LEGACY_PREDEFINED_VARS).join(\"|\") + \")\";\n  const userVariablePattern = '(\\\\$_*[^_ ]+)';\n  const variablesReplaceRE = new RegExp(`${userVariablePattern}|${predefinedVarsPattern}`, \"g\"); // @ts-ignore\n\n  expression = expression.replace(variablesReplaceRE, match => LEGACY_PREDEFINED_VARS[match] || match);\n  return expression.replace(/[ _]+/g, '_');\n}","map":null,"metadata":{},"sourceType":"module"}