{"ast":null,"code":"import { snakeCase } from \"../utils/snakeCase.js\";\n\nclass Layer {\n  /**\n   * Layer\n   * @constructor Layer\n   * @param {Object} options - layer parameters\n   */\n  constructor(options) {\n    this.options = {};\n\n    if (options != null) {\n      [\"resourceType\", \"type\", \"publicId\", \"format\"].forEach(key => {\n        var ref; // @ts-ignore\n\n        return this.options[key] = (ref = options[key]) != null ? ref : options[snakeCase(key)];\n      });\n    }\n  }\n\n  resourceType(value) {\n    this.options.resourceType = value;\n    return this;\n  }\n\n  type(value) {\n    this.options.type = value;\n    return this;\n  }\n\n  publicId(value) {\n    this.options.publicId = value;\n    return this;\n  }\n  /**\n   * Get the public ID, formatted for layer parameter\n   * @function Layer#getPublicId\n   * @return {String} public ID\n   */\n\n\n  getPublicId() {\n    var ref;\n    return (ref = this.options.publicId) != null ? ref.replace(/\\//g, \":\") : void 0;\n  }\n  /**\n   * Get the public ID, with format if present\n   * @function Layer#getFullPublicId\n   * @return {String} public ID\n   */\n\n\n  getFullPublicId() {\n    if (this.options.format != null) {\n      return this.getPublicId() + \".\" + this.options.format;\n    } else {\n      return this.getPublicId();\n    }\n  }\n\n  format(value) {\n    this.options.format = value;\n    return this;\n  }\n  /**\n   * generate the string representation of the layer\n   * @function Layer#toString\n   */\n\n\n  toString() {\n    let components = [];\n\n    if (this.options.publicId == null) {\n      throw \"Must supply publicId\";\n    }\n\n    if (!(this.options.resourceType === \"image\")) {\n      components.push(this.options.resourceType);\n    }\n\n    if (!(this.options.type === \"upload\")) {\n      components.push(this.options.type);\n    }\n\n    components.push(this.getFullPublicId());\n    return components.filter(x => !!x).join(\":\");\n  }\n\n  clone() {\n    return new Layer(this.options);\n  }\n\n}\n\nexport default Layer;","map":null,"metadata":{},"sourceType":"module"}