{"ast":null,"code":"import { share } from 'rxjs/operators';\nimport { User } from \"../models/user\";\nimport { HttpHeaders } from \"@angular/common/http\";\nimport { environment } from \"../../environments/environment.staging\";\nimport { JwtHelperService } from \"@auth0/angular-jwt\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(httpClient) {\n      this.httpClient = httpClient; // user information\n\n      this.currentUser = null; // utility function to decode token\n\n      this.jwtService = new JwtHelperService(); // check if there is some token in the storage and update information\n\n      this.updateUserInformation();\n    }\n\n    auth(user) {\n      // using pipe(share()) to prevent multiple submissions per subscriber (observables are cold)\n      // to find out more see https://blog.strongbrew.io/how-share()-can-reduce-network-requests/\n      const observable = this.httpClient.post(`${environment.apiUrl}/auth`, {\n        email: user.email,\n        encodedPassword: user.encodedPassword\n      }, {\n        observe: 'response'\n      }).pipe(share());\n      observable.subscribe(data => {\n        let token = data['headers'].get('Authorization');\n\n        if (token == null) {\n          throw new Error('token was not present in the response');\n        }\n\n        token = token.replace('Bearer ', '');\n        sessionStorage.setItem('token', token);\n        this.updateUserInformation();\n      }, err => {\n        this.logout();\n      });\n      return observable;\n    }\n\n    create(user) {\n      // using pipe(share()) to prevent multiple submissions per subscriber (observables are cold)\n      // to find out more see https://blog.strongbrew.io/how-share()-can-reduce-network-requests/\n      const observable = this.httpClient.post(`${environment.apiUrl}/auth/users`, {\n        email: user.email,\n        username: user.username,\n        name: user.name,\n        encoded_password: user.encodedPassword\n      }).pipe(share());\n      observable.subscribe(data => {\n        console.log(data);\n      }, err => {\n        console.log('creation error', err);\n      });\n      return observable;\n    }\n\n    get currentToken() {\n      return sessionStorage.getItem('token');\n    }\n\n    logout() {\n      sessionStorage.removeItem('token');\n      this.updateUserInformation();\n    }\n\n    refreshToken() {\n      const observable = this.httpClient.post(`${environment.apiUrl}/refresh-token`, {}, {\n        headers: new HttpHeaders({\n          Authorization: this.currentToken\n        }),\n        observe: 'response'\n      }).pipe(share());\n      observable.subscribe(data => {\n        let refreshedToken = data['headers'].get('Authorization');\n\n        if (refreshedToken == null) {\n          throw new Error('token was not present in the response');\n        }\n\n        refreshedToken = refreshedToken.replace('Bearer ', '');\n        sessionStorage.setItem('token', refreshedToken);\n        this.updateUserInformation();\n      }, err => {\n        this.logout();\n      });\n      return observable;\n    }\n\n    isLoggedIn() {\n      return this.currentToken != null;\n    }\n\n    isAdmin() {\n      return this.isLoggedIn() && this.currentUser.admin;\n    }\n\n    get email() {\n      return this.currentUser.email;\n    }\n\n    updateUserInformation() {\n      if (this.currentToken) {\n        const decodedToken = this.jwtService.decodeToken(this.currentToken);\n        this.currentUser = new User();\n        this.currentUser.email = decodedToken.sub;\n        this.currentUser.username = decodedToken.username;\n        this.currentUser.name = decodedToken.name;\n        this.currentUser.admin = decodedToken.admin.toLowerCase() === 'true';\n        this.currentUser.exp = decodedToken.exp;\n      } else {\n        this.currentUser = null;\n      }\n    }\n\n    getUser() {\n      return this.currentUser;\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}