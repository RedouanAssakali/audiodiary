{"ast":null,"code":"import { base64Encode } from \"../../internal/utils/base64Encode.js\";\nimport { Action } from \"../../internal/Action.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\n/**\n * @memberOf Actions.CustomFunction\n * @see Visit {@link Actions.CustomFunction|Custom functions} for an example\n */\n\nclass CustomFunctionAction extends Action {\n  /**\n   *\n   * @param {string} fn The custom function to use, can be a URL or a publicID\n   */\n  constructor(fn) {\n    super();\n    this.fn = fn;\n  }\n\n  encodeCustomFunctionString(fn) {\n    const encodedSource = base64Encode(fn);\n    return encodedSource;\n  }\n  /**\n   * Use a WASM as a custom function,\n   * Used with the builders of `remote` and `wasm` from {@link Actions.CustomFunction|Custom functions}\n   */\n\n\n  asWasm() {\n    this.mode = 'wasm';\n    return this;\n  }\n  /**\n   * Use a remote URL as a custom function\n   * Used with the builders of `remote` and `wasm` from {@link Actions.CustomFunction|Custom functions}\n   */\n\n\n  asRemote() {\n    this.mode = 'remote';\n    return this;\n  }\n\n  prepareQualifiers() {\n    this.encodedFn = this.fn;\n\n    if (this.mode === 'remote') {\n      this.encodedFn = this.encodeCustomFunctionString(this.fn);\n    }\n\n    return this.addQualifier(new Qualifier('fn', new QualifierValue([this.pre, this.mode, this.encodedFn])));\n  }\n\n  toString() {\n    return super.toString().replace(/\\//g, ':');\n  }\n\n}\n\nexport default CustomFunctionAction;","map":null,"metadata":{},"sourceType":"module"}