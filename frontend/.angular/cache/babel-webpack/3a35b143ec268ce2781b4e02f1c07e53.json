{"ast":null,"code":"import _asyncToGenerator from \"/Users/hannatoenbreker/IdeaProjects/ad-vmc-1/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport Chart from \"chart.js/auto\"; // @ts-ignore\n\nimport mapboxgl from \"mapbox-gl\";\nimport { User } from \"../../../models/user\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../services/posts.service\";\nimport * as i2 from \"../../../services/auth.service\";\nimport * as i3 from \"../../../services/user.service\";\nimport * as i4 from \"@angular/common\";\n\nfunction AdminPostsComponent_div_6_tr_18_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵelementStart(1, \"th\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"td\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"td\");\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"td\");\n    i0.ɵɵelementStart(14, \"button\", 9);\n    i0.ɵɵlistener(\"click\", function AdminPostsComponent_div_6_tr_18_Template_button_click_14_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const post_r2 = restoredCtx.$implicit;\n      const ctx_r3 = i0.ɵɵnextContext(2);\n      return ctx_r3.deletePosts(post_r2.id);\n    });\n    i0.ɵɵtext(15, \"Remove post\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const post_r2 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(post_r2.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(post_r2.title);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(post_r2.description);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(post_r2.user.email);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(post_r2.audio);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(post_r2.amountReport);\n  }\n}\n\nfunction AdminPostsComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵelementStart(1, \"table\", 6);\n    i0.ɵɵelementStart(2, \"thead\");\n    i0.ɵɵelementStart(3, \"tr\");\n    i0.ɵɵelementStart(4, \"th\", 7);\n    i0.ɵɵtext(5, \"Id\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"th\", 7);\n    i0.ɵɵtext(7, \"Title\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"th\", 7);\n    i0.ɵɵtext(9, \"Description\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"th\", 7);\n    i0.ɵɵtext(11, \"User\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"th\", 7);\n    i0.ɵɵtext(13, \"Audio\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"th\", 7);\n    i0.ɵɵtext(15, \"Amount of reports\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(16, \"th\", 7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"tbody\");\n    i0.ɵɵtemplate(18, AdminPostsComponent_div_6_tr_18_Template, 16, 6, \"tr\", 8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(18);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.reportedPosts);\n  }\n}\n\nexport let AdminPostsComponent = /*#__PURE__*/(() => {\n  class AdminPostsComponent {\n    constructor(postsService, authService, userService) {\n      this.postsService = postsService;\n      this.authService = authService;\n      this.userService = userService;\n      this.type = 'bar';\n      this.posts = [];\n      this.reportedPosts = [];\n      this.currentAdmin = new User();\n    }\n\n    ngOnInit() {\n      this.checkAdminOrResearch();\n      this.getPosts();\n      this.data = {\n        labels: ['Posts today'],\n        datasets: [{\n          label: 'Amount of posts',\n          data: [820],\n          // @ts-ignore\n          backgroundColor: ['rgba(255, 99, 132, 0.2)'],\n          // @ts-ignore\n          borderColor: ['rgba(255, 99, 132, 1)'],\n          borderWidth: 1\n        }]\n      };\n      this.places = {\n        \"type\": \"FeatureCollection\",\n        \"features\": []\n      };\n      this.postsService.restGetPosts().subscribe(data => {\n        //this.posts = data;\n        this.posts = data;\n        JSON.parse(JSON.stringify(data));\n\n        for (let point of data) {\n          let coordinate = [point.lng, point.lat];\n          let feature = {\n            \"type\": \"Feature\",\n            \"geometry\": {\n              \"type\": \"Point\",\n              \"coordinates\": coordinate\n            },\n            \"properties\": point\n          };\n          this.places.features.push(feature);\n        } // @ts-ignore\n        // this.places = GeoJSON.parse(JSON.stringify(data));\n\n      }, error => console.log(\"Error: \" + error.status + \" - \" + error.error));\n      mapboxgl.accessToken = 'pk.eyJ1IjoiaGFubmF0b2VuYnJla2VyIiwiYSI6ImNrdXdzMjNhdTF6cHAydmxuenY3ODQ3djkifQ.X7LsiDBkUfz7vn7LfkUvKQ';\n      this.map = new mapboxgl.Map({\n        container: 'map-mapbox',\n        style: 'mapbox://styles/mapbox/dark-v10',\n        center: [9.0000, 53.0000],\n        zoom: 3\n      });\n      this.map.on('load', () => {\n        // Add a new source from our GeoJSON data and\n        // set the 'cluster' option to true. GL-JS will\n        // add the point_count property to your source data.\n        this.map.addSource('posts', {\n          type: 'geojson',\n          // Point to GeoJSON data. This example visualizes all M1.0+ earthquakes\n          // from 12/22/15 to 1/21/16 as logged by USGS' Earthquake hazards program.\n          data: this.places,\n          cluster: true,\n          clusterMaxZoom: 1,\n          clusterRadius: 50 // Radius of each cluster when clustering points (defaults to 50)\n\n        });\n        this.map.addLayer({\n          id: 'clusters',\n          type: 'circle',\n          source: 'posts',\n          filter: ['has', 'point_count'],\n          paint: {\n            // Use step expressions (https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)\n            // with three steps to implement three types of circles:\n            //   * Blue, 20px circles when point count is less than 100\n            //   * Yellow, 30px circles when point count is between 100 and 750\n            //   * Pink, 40px circles when point count is greater than or equal to 750\n            'circle-color': ['step', ['get', 'point_count'], '#51bbd6', 100, '#f1f075', 750, '#f28cb1'],\n            'circle-radius': ['step', ['get', 'point_count'], 20, 100, 30, 750, 40]\n          }\n        });\n        this.map.addLayer({\n          id: 'cluster-count',\n          type: 'symbol',\n          source: 'posts',\n          filter: ['has', 'point_count'],\n          layout: {\n            'text-field': '{point_count_abbreviated}',\n            'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\n            'text-size': 12\n          }\n        });\n        this.map.addLayer({\n          id: 'unclustered-point',\n          type: 'circle',\n          source: 'posts',\n          filter: ['!', ['has', 'point_count']],\n          paint: {\n            'circle-color': '#11b4da',\n            'circle-radius': 4,\n            'circle-stroke-width': 1,\n            'circle-stroke-color': '#fff'\n          }\n        }); // inspect a cluster on click\n\n        this.map.on('click', 'clusters', e => {\n          const features = this.map.queryRenderedFeatures(e.point, {\n            layers: ['clusters']\n          });\n          const clusterId = features[0].properties.cluster_id;\n          this.map.getSource('posts').getClusterExpansionZoom(clusterId, (err, zoom) => {\n            if (err) return;\n            this.map.easeTo({\n              center: features[0].geometry.coordinates,\n              zoom: zoom\n            });\n          });\n        }); // When a click event occurs on a feature in\n        // the unclustered-point layer, open a popup at\n        // the location of the feature, with\n        // description HTML from its properties.\n\n        this.map.on('click', 'unclustered-point', e => {\n          const coordinates = e.features[0].geometry.coordinates.slice();\n          const mag = e.features[0].properties.mag;\n          const tsunami = e.features[0].properties.tsunami === 1 ? 'yes' : 'no'; // Ensure that if the map is zoomed out such that\n          // multiple copies of the feature are visible, the\n          // popup appears over the copy being pointed to.\n\n          while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n            coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n          }\n\n          new mapboxgl.Popup().setLngLat(coordinates).setHTML(`magnitude: ${mag}<br>Was there a tsunami?: ${tsunami}`).addTo(this.map);\n        });\n        this.map.on('mouseenter', 'clusters', () => {\n          this.map.getCanvas().style.cursor = 'pointer';\n        });\n        this.map.on('mouseleave', 'clusters', () => {\n          this.map.getCanvas().style.cursor = '';\n        });\n      });\n    }\n\n    changeChart(date) {\n      this.chart.destroy();\n      let labels = {};\n\n      if (date == 'day') {\n        labels = ['Posts today'];\n        this.type = 'bar';\n        this.data = {\n          labels: labels,\n          datasets: [{\n            label: 'Amount of posts',\n            data: [820],\n            backgroundColor: ['rgba(255, 99, 132, 0.2)'],\n            borderColor: ['rgba(255, 99, 132, 1)'],\n            borderWidth: 1\n          }]\n        };\n      } else if (date == 'week') {\n        this.type = 'line';\n        labels = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n        this.data = {\n          labels: labels,\n          datasets: [{\n            label: 'Amount of posts',\n            data: [65, 59, 80, 81, 56, 55, 40],\n            fill: false,\n            borderColor: 'rgb(75, 192, 192)',\n            tension: 0.1\n          }]\n        };\n      } else if (date == 'month') {\n        this.type = 'line';\n        labels = ['Week 40', 'Week 41', 'Week 42', 'Week 43'];\n        this.data = {\n          labels: labels,\n          datasets: [{\n            label: 'Amount of posts',\n            data: [299, 159, 180, 302],\n            fill: false,\n            borderColor: 'rgb(75, 192, 192)',\n            tension: 0.1\n          }]\n        };\n      }\n\n      const ctx = document.getElementById('chart'); // @ts-ignore\n\n      this.chart = new Chart(ctx, {\n        type: this.type,\n        data: this.data\n      });\n    }\n\n    getPosts() {\n      this.postsService.getReportedPosts().subscribe(data => {\n        // @ts-ignore\n        this.reportedPosts = data;\n        console.log(data);\n      }, error => console.log(\"Error: \" + error.status + \" - \" + error.error));\n    }\n\n    deletePosts(postId) {\n      this.postsService.restDeletePosts(postId).subscribe(response => {\n        for (let i = 0; i < this.reportedPosts.length; i++) {\n          if (this.reportedPosts[i].id == postId) {\n            this.reportedPosts.splice(this.posts.indexOf(this.posts[i]), 1);\n          }\n        }\n      }, error => {\n        console.log(error);\n      });\n    }\n\n    downloadObjectAsJson() {\n      delete this.places['user'];\n      delete this.places['audio'];\n      var dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(this.places));\n      var downloadAnchorNode = document.createElement('a');\n      downloadAnchorNode.setAttribute(\"href\", dataStr);\n      downloadAnchorNode.setAttribute(\"download\", \"GEO.json\");\n      document.body.appendChild(downloadAnchorNode); // required for firefox\n\n      downloadAnchorNode.click();\n      downloadAnchorNode.remove();\n    }\n\n    checkAdminOrResearch() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        let user = yield _this.userService.restGetUser(_this.authService.getUser().email);\n        user.pipe().subscribe(data => {\n          _this.currentAdmin = data;\n          console.log(_this.currentAdmin.verified);\n        });\n      })();\n    }\n\n  }\n\n  AdminPostsComponent.ɵfac = function AdminPostsComponent_Factory(t) {\n    return new (t || AdminPostsComponent)(i0.ɵɵdirectiveInject(i1.PostsService), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.UserService));\n  };\n\n  AdminPostsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AdminPostsComponent,\n    selectors: [[\"app-admin-location\"]],\n    decls: 7,\n    vars: 1,\n    consts: [[1, \"row\"], [1, \"col\"], [\"id\", \"map-mapbox\", 2, \"height\", \"400px\"], [3, \"click\"], [\"class\", \"table-responsive\", 4, \"ngIf\"], [1, \"table-responsive\"], [\"id\", \"table\", 1, \"table\", \"table-striped\"], [\"scope\", \"col\"], [4, \"ngFor\", \"ngForOf\"], [1, \"btn-primary\", 3, \"click\"]],\n    template: function AdminPostsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelement(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"button\", 3);\n        i0.ɵɵlistener(\"click\", function AdminPostsComponent_Template_button_click_3_listener() {\n          return ctx.downloadObjectAsJson();\n        });\n        i0.ɵɵtext(4, \"Download data\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 1);\n        i0.ɵɵtemplate(6, AdminPostsComponent_div_6_Template, 19, 1, \"div\", 4);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngIf\", ctx.currentAdmin.verified == true);\n      }\n    },\n    directives: [i4.NgIf, i4.NgForOf],\n    styles: [\"\"]\n  });\n  return AdminPostsComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}