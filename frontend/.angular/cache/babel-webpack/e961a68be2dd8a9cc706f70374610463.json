{"ast":null,"code":"import { autoGravity, focusOn } from \"../../qualifiers/gravity.js\";\nimport { FocusOnValue, ocr } from \"../../qualifiers/focusOn.js\";\nimport { AutoFocus } from \"../../qualifiers/autoFocus.js\";\n/**\n * Validates that gravityModel is an ICompassGravityModel\n * @param gravityModel\n */\n\nfunction isCompassGravityModel(gravityModel) {\n  return gravityModel.gravityType === 'direction';\n}\n/**\n * Validates that gravityModel is an IOcrGravityModel\n * @param gravityModel\n */\n\n\nfunction isOcrGravityModel(gravityModel) {\n  return gravityModel.gravityType === 'ocr';\n}\n/**\n * Validates that gravityModel is an IAutoGravityModel\n * @param gravityModel\n */\n\n\nfunction isAutoGravityModel(gravityModel) {\n  return gravityModel.gravityType === 'auto';\n}\n/**\n * Create AutoFocus from IAutoGravityObjectModel\n * @param autoGravityObjectModel\n */\n\n\nfunction createAutoFocusFromModel(autoGravityObjectModel) {\n  const {\n    object,\n    weight,\n    avoid\n  } = autoGravityObjectModel;\n  const autoFocus = new AutoFocus(new FocusOnValue(object));\n  (weight || weight === 0) && autoFocus.weight(weight);\n  avoid && autoFocus.avoid();\n  return autoFocus;\n}\n/**\n * Create AutoGravity from IAutoGravityModel\n * @param gravityModel\n */\n\n\nfunction createAutoGravityFromModel(gravityModel) {\n  const autoFocusModel = gravityModel.autoFocus || [];\n  const autoFocus = autoFocusModel.map(createAutoFocusFromModel);\n  return autoGravity().autoFocus(...autoFocus);\n}\n/**\n * Create FocusOnGravity from given IFocusOnGravityModel\n * @param gravityModel\n */\n\n\nfunction createFocusOnGravityFromModel(gravityModel) {\n  const focusOnObjects = (gravityModel.focusOnObjects || []).map(str => new FocusOnValue(str));\n  const result = focusOn(...focusOnObjects);\n\n  if (gravityModel.fallbackGravity) {\n    const autoGravity = createAutoGravityFromModel(gravityModel.fallbackGravity);\n    result.fallbackGravity(autoGravity);\n  }\n\n  return result;\n}\n/**\n * Create gravity instance from given gravity model\n * @param gravityModel\n */\n\n\nfunction createGravityFromModel(gravityModel) {\n  if (isCompassGravityModel(gravityModel)) {\n    return gravityModel.compass;\n  }\n\n  if (isOcrGravityModel(gravityModel)) {\n    return focusOn(ocr());\n  }\n\n  if (isAutoGravityModel(gravityModel)) {\n    return createAutoGravityFromModel(gravityModel);\n  }\n\n  return createFocusOnGravityFromModel(gravityModel);\n}\n\nexport { createGravityFromModel };","map":null,"metadata":{},"sourceType":"module"}