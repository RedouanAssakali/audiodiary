{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\laragon\\\\www\\\\ad-vmc-1\\\\frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\n// @ts-ignore\nimport * as mapboxgl from \"mapbox-gl\"; // @ts-ignore\n\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\nimport '@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css';\nimport { Theme } from \"../../../enums/theme\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../services/posts.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"../switch/switch.component\";\nimport * as i5 from \"@ng-bootstrap/ng-bootstrap\";\n\nfunction MapviewComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"div\", 3);\n    i0.ɵɵelement(2, \"app-switch\", 4);\n    i0.ɵɵelementStart(3, \"div\", 5);\n    i0.ɵɵelementStart(4, \"button\", 6);\n    i0.ɵɵtext(5, \"Filter theme\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 7);\n    i0.ɵɵelement(7, \"span\", 8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"switchText\", ctx_r0.feedview);\n  }\n}\n\nfunction MapviewComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 9);\n    i0.ɵɵelementStart(1, \"button\", 10);\n    i0.ɵɵlistener(\"click\", function MapviewComponent_div_2_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.overlayTrue(false);\n    });\n    i0.ɵɵelementStart(2, \"h3\");\n    i0.ɵɵtext(3, \"X\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 11);\n    i0.ɵɵelement(5, \"router-outlet\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport let MapviewComponent = /*#__PURE__*/(() => {\n  class MapviewComponent {\n    constructor(postsService, router, activatedRoute) {\n      this.postsService = postsService;\n      this.router = router;\n      this.activatedRoute = activatedRoute;\n      this.posts = [];\n      this.feedview = \"Feedview\";\n      this.showOverlay = false;\n    }\n\n    ngOnInit() {\n      this.places = {\n        \"type\": \"FeatureCollection\",\n        \"features\": []\n      };\n      this.postsService.restGetPosts().subscribe(data => {\n        //this.posts = data;\n        this.posts = data;\n        JSON.parse(JSON.stringify(data));\n\n        for (let point of data) {\n          let coordinate = [point.lng, point.lat];\n          let feature = {\n            \"type\": \"Feature\",\n            \"geometry\": {\n              \"type\": \"Point\",\n              \"coordinates\": coordinate\n            },\n            \"properties\": point\n          };\n          this.places.features.push(feature);\n        } // @ts-ignore\n        // this.places = GeoJSON.parse(JSON.stringify(data));\n\n      }, error => console.log(\"Error: \" + error.status + \" - \" + error.error));\n    }\n\n    ngAfterViewInit() {\n      mapboxgl.accessToken = 'pk.eyJ1IjoiaGFubmF0b2VuYnJla2VyIiwiYSI6ImNrdXdzMjNhdTF6cHAydmxuenY3ODQ3djkifQ.X7LsiDBkUfz7vn7LfkUvKQ';\n      this.map = new mapboxgl.Map({\n        style: 'mapbox://styles/mapbox/outdoors-v11',\n        center: [4.897070, 50.877956],\n        zoom: 5.5,\n        container: 'map-mapbox'\n      });\n      const nav = new mapboxgl.NavigationControl();\n      this.map.addControl(nav, 'top-left');\n      this.map.addControl(new MapboxGeocoder({\n        accessToken: 'pk.eyJ1IjoiaGFubmF0b2VuYnJla2VyIiwiYSI6ImNrdXdzMjNhdTF6cHAydmxuenY3ODQ3djkifQ.X7LsiDBkUfz7vn7LfkUvKQ',\n        mapboxgl: mapboxgl\n      }));\n      this.map.addControl(new mapboxgl.GeolocateControl({\n        positionOptions: {\n          enableHighAccuracy: true\n        },\n        // When active the map will receive updates to the device's location as it changes.\n        trackUserLocation: true,\n        // Draw an arrow next to the location dot to indicate which direction the device is heading.\n        showUserHeading: true\n      }));\n      const filterGroup = document.getElementById('filter-group');\n      this.map.on('load', () => {\n        this.map.addSource('places', {\n          'type': 'geojson',\n          'data': this.places\n        });\n        const popup = new mapboxgl.Popup({\n          closeButton: false,\n          closeOnClick: false\n        });\n\n        for (const feature of this.places.features) {\n          const symbol = feature.properties.theme;\n          this.theme = this.getTheme(feature.properties.theme);\n          const layerID = `poi-${symbol}`;\n\n          if (!this.map.getLayer(layerID)) {\n            this.map.addLayer({\n              'id': layerID,\n              'type': 'circle',\n              'source': 'places',\n              'paint': {\n                'circle-color': this.theme,\n                'circle-stroke-color': 'white',\n                'circle-radius': 10\n              },\n              'filter': ['==', 'theme', symbol]\n            });\n            const container = document.createElement('div');\n            container.className = \"form-check form-check-inline\";\n            const input = document.createElement('input');\n            input.type = 'checkbox';\n            input.className = 'm-1';\n            input.id = layerID;\n            input.checked = true;\n            container.appendChild(input);\n            const label = document.createElement('label');\n            label.setAttribute('for', layerID);\n            label.textContent = symbol.split(\".\")[1];\n            label.className = \"mr-3\";\n            container.appendChild(label);\n            filterGroup.appendChild(container);\n            input.addEventListener('change', e => {\n              this.map.setLayoutProperty(layerID, 'visibility', // @ts-ignore\n              e.target.checked ? 'visible' : 'none');\n            });\n          } // @ts-ignore\n\n\n          this.map.on('mouseenter', layerID, e => {\n            this.map.on('click', layerID, e => {\n              this.overlayTrue(true);\n              this.openOverlay(e.features[0].properties.id);\n            });\n            this.map.getCanvas().style.cursor = 'pointer';\n            this.map.flyTo({\n              center: e.features[0].geometry.coordinates\n            });\n            const coordinates = e.features[0].geometry.coordinates.slice();\n            this.popupTheme = this.getTheme(e.features[0].properties.theme);\n            const img = e.features[0].properties.img;\n            const title = e.features[0].properties.title;\n            const description = e.features[0].properties.description;\n            popup.setLngLat(coordinates).setHTML(`<div class=\"postCard\" style=\"background-color:` + this.popupTheme + `\">\n            <p class=\"postedByTag\" style=\"color: white\"><i class=\"bi bi-person-circle\" style=\"color: white\"></i>RenouYuyut</p>\n          <img class=\"card-img-top\" src=\"../../../../assets/img/postsimgs/` + img + `\">\n          <div class=\"css_animation\">\n          <div id=\"soundwavesWrapper\" (click)=\"activateSoundWaves()\" class=\"onClickWrapper\" style=\"z-index: 5\">\n            </div>\n            <div class=\"card-body\">\n\n          <div class=\" shadow-lg title-container\">\n          <h5 class=\"card-title\" style=\"color: white\">` + title + `</h5>\n          </div>\n          <div class=\"shadow-lg text-container\">\n          <p class=\"card-text\" style=\"color: white\">` + description + `</p>\n          </div>\n\n            </div>\n        `).addTo(this.map);\n          });\n          this.map.on('mouseleave', layerID, () => {\n            this.map.getCanvas().style.cursor = '';\n            popup.remove();\n          });\n        }\n\n        const id = this.router.url.split(\"/\")[2];\n\n        for (let i = 0; i < this.posts.length; i++) {\n          if (this.places.features[i].properties.id == id) {\n            this.map.flyTo({\n              center: this.places.features[i].geometry.coordinates\n            });\n            const coordinates = this.places.features[i].geometry.coordinates.slice();\n            const theme = this.getTheme(this.places.features[i].properties.theme);\n            const img = this.places.features[i].properties.img;\n            const title = this.places.features[i].properties.title;\n            const description = this.places.features[i].properties.description;\n            new mapboxgl.Popup().setLngLat(coordinates).setHTML(`<div class=\"postCard\" style=\"background-color:` + theme + `\">\n            <p class=\"postedByTag\" style=\"color: white\"><i class=\"bi bi-person-circle\" style=\"color: white\"></i>RenouYuyut</p>\n          <img class=\"card-img-top\" src=\"` + img + `\">\n          <div class=\"css_animation\">\n          <div id=\"soundwavesWrapper\" (click)=\"activateSoundWaves()\" class=\"onClickWrapper\" style=\"z-index: 5\">\n            </div>\n            <div class=\"card-body\">\n\n          <div class=\" shadow-lg title-container\">\n          <h5 class=\"card-title\" style=\"color: white\">` + title + `</h5>\n          </div>\n          <div class=\"shadow-lg text-container\">\n          <p class=\"card-text\" style=\"color: white\">` + description + `</p>\n          </div>\n\n            </div>\n        `).addTo(this.map);\n          }\n        }\n\n        this.map.on('mouseleave', 'places', () => {\n          this.map.getCanvas().style.cursor = '';\n          popup.remove();\n        });\n      });\n    }\n\n    getTheme(theme) {\n      switch (theme) {\n        case \"Theme.SUN\":\n          this.theme = Theme.SUN;\n          break;\n\n        case \"Theme.SAND\":\n          this.theme = Theme.SAND;\n          break;\n\n        case \"Theme.FOREST\":\n          this.theme = Theme.FOREST;\n          break;\n\n        case \"Theme.WATER\":\n          this.theme = Theme.WATER;\n          break;\n\n        case \"Theme.CITY\":\n          this.theme = Theme.CITY;\n          break;\n\n        case \"Theme.MOUNTAIN\":\n          this.theme = Theme.MOUNTAIN;\n          break;\n      }\n\n      return this.theme;\n    }\n\n    overlayTrue(condition) {\n      this.showOverlay = condition;\n    }\n\n    openOverlay(pId) {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        yield _this.router.navigate([pId], {\n          relativeTo: _this.activatedRoute\n        });\n        _this.showOverlay = true;\n      })();\n    }\n\n  }\n\n  MapviewComponent.ɵfac = function MapviewComponent_Factory(t) {\n    return new (t || MapviewComponent)(i0.ɵɵdirectiveInject(i1.PostsService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n  };\n\n  MapviewComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MapviewComponent,\n    selectors: [[\"app-mapview\"]],\n    inputs: {\n      showOverlay: \"showOverlay\"\n    },\n    outputs: {\n      feedview: \"feedview\"\n    },\n    decls: 3,\n    vars: 2,\n    consts: [[4, \"ngIf\"], [\"id\", \"map-mapbox\", 2, \"cursor\", \"pointer\"], [\"style\", \"z-index: 100\", 4, \"ngIf\"], [1, \"btn-group\", \"mb-2\"], [3, \"switchText\"], [\"ngbDropdown\", \"\", 1, \"d-inline-block\"], [\"id\", \"dropdownMenuButton\", \"ngbDropdownToggle\", \"\", 1, \"btn\", \"btn-outline-primary\", \"ml-2\"], [\"ngbDropdownMenu\", \"\", \"aria-labelledby\", \"dropdownMenuButton\"], [\"id\", \"filter-group\", 1, \"filter-group\"], [2, \"z-index\", \"100\"], [\"id\", \"close\", 3, \"click\"], [\"id\", \"overlay\", 1, \"cdk-overlay-container\"]],\n    template: function MapviewComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, MapviewComponent_div_0_Template, 8, 1, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵtemplate(2, MapviewComponent_div_2_Template, 6, 0, \"div\", 2);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", !ctx.showOverlay);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.showOverlay);\n      }\n    },\n    directives: [i3.NgIf, i4.SwitchComponent, i5.NgbDropdown, i5.NgbDropdownToggle, i5.NgbDropdownMenu, i2.RouterOutlet],\n    styles: [\"#map-mapbox[_ngcontent-%COMP%]{height:100%;width:100%;position:absolute}#overlay[_ngcontent-%COMP%]{position:fixed;top:50%;left:50%;width:300px;height:200px;margin-left:-150px;margin-top:-100px;text-align:center;border-radius:5px;z-index:10;box-shadow:0 0 0 9999px #00000080}#close[_ngcontent-%COMP%], #context[_ngcontent-%COMP%]{top:50%;left:50%;width:87px;height:511px;margin-left:-150px;margin-top:-100px;position:sticky;display:block;float:right;border:transparent;background-color:#fff;color:#fff;z-index:100}#close[_ngcontent-%COMP%]{background-color:transparent}.postCard[_ngcontent-%COMP%]{position:absolute;z-index:100;width:379px;height:auto;background:#F4B371;color:#af2c0e;margin:10px auto;float:none;border-radius:21px;display:flex;flex:1 1 auto}app-comments[_ngcontent-%COMP%]{position:relative;display:flex;right:345px;margin-top:200px}.postedByTag[_ngcontent-%COMP%]{color:#fff;margin-left:10px;font-size:10px}.card-img-top[_ngcontent-%COMP%]{width:182px;height:125px;margin-top:23px;margin-left:20px;border-radius:17px;position:absolute}.title-container[_ngcontent-%COMP%]{width:130px;height:21px;border-radius:7px;background:#94260d}.card-title[_ngcontent-%COMP%]{font-size:15px;color:#fff;margin-left:10px}.text-container[_ngcontent-%COMP%]{width:130px;height:90px;margin-top:2px;border-radius:7px;background:white}.card-text[_ngcontent-%COMP%]{margin-top:1px;margin-left:2px;font-size:7px;color:#000}.bi[_ngcontent-%COMP%]{padding:3px}.bi-flag-fill[_ngcontent-%COMP%]{margin-left:36px}\"]\n  });\n  return MapviewComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}